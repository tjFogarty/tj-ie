{"/404.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        Content not found.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":[],"headings":[],"title":"TJ Fogarty","description":"Performance focused Front-end Development."},"/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        Senior Software Engineer @ Teamwork\n      \n        Text Selection Particle Effects\n      \n    \n      \n        Building an Appreciation System\n      \n    \n      \n        Self-Host Google Fonts\n      \n    More posts can be found in the archive.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":[],"headings":["TJ Fogarty","Latest 3 Posts"],"title":"TJ Fogarty","description":"Performance focused Front-end Development."},"/about/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        I’m TJ, a web devel­op­er from Lim­er­ick, Ire­land 🇮🇪 and liv­ing in Water­ford. I have a BSc Hons in Multimedia Programming, and Design from the Limerick Institute of Technology.I'm a Senior Software Engineer at Teamwork. Pre­vi­ous­ly, I’ve worked for ResourceKraft as a Designer/​Developer, Mav­er­ick as the Lead Devel­op­er, Emag­ine as the Tech­ni­cal Lead, and StitcherAds as a UI Devel­op­er.I've been fortunate enough to work with some amazing clients including The President of Ireland, some third-level colleges, and countless local and national businesses.You can find me at the links below:Twit­terGitHubCode­PenSome folks on the inter­net think I don’t spout total non­sense. It’s news to me, but here’s some proof:Tim­ber and Twig Reignit­ed my Love for Word­Press on CSS-TricksImproving Client-Side Performance on CSS Weekly, Responsive Design Weekly, Vue.js Feed, and Pony Foo.“Do Not Track” fea­tured on an Alli​ga​tor​.io newsletterBuil­ding my Site series on Craft Link List Newsletter'A Signal in the Static' featured on Craft Link List NewsletterDIY RSS Read­er fea­tured in a Codrops CollectiveCraft Plu­g­in Search fea­tured on Code­Pen Spark← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["about"],"headings":["About Me","#"],"title":"About Me","description":"Performance focused Front-end Development."},"/a-signal-in-the-static/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    19 Aug 2018\n  \n  \n\n  \n\n  About a year ago I set out to rebuild my site, and being reared on PHP I opted to go for Craft CMS while it was in beta. I figured it'd be interesting to learn it while it was still in development, and maybe create my own plugins.Haha. Jokes. I did not. I tried, though, but never really needed anything extra.I was also using Laravel Forge to automatically deploy whenever I pushed any changes to the master branch. To this day it's still a nice approach, but there's a lot of moving parts. I have a repo, a server that needs to be looked after (like when I updated PHP and broke everything), a database that needs to be backed up, and a CMS with some plugins that need to be kept up to date. Granted, I could not have touched it after day 1 and it would still work just the same, but that's not me. If it ain't broke, go fix it.That's where the allure of a static site generator comes in. As far as the site goes, everything is in one place. Content lives in Markdown files which makes things pretty portable. I landed on using Hugo after seeing some recommendations for it, and in about a day I had my entire site copied over, including CSS and JS. To copy the content I took advantage of the Element API plugin for Craft to get a JSON object of all my posts. The config file for the plugin looked like this:So when it hit https://my-site.com/posts.json it returned everything I needed. I saved this to a file to quickly generate markdown versions like so:I needed to run sudo node index.js on that as it needed to create files, but I didn't have to touch the generated markdown files once they were in the right folder.Once that was done, I skipped on over to Netlify and hooked it up. I needed to do some configuration before everything would work. Mainly this was down to my assets living in a theme which was in a subfolder. To let Netlify know about it, I had to create a new package.json in the root with a build command that did the following:Then the build command in my root package.json dug into the folder it needed and ran some more commands:After that, it was smooth sailing. Limerick just won the All-Ireland senior hurling final so I'm gonna grab a beer. That makes two victories today. Cheers, agus Luimneach Abú!!!← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["a-signal-in-the-static"],"headings":["A Signal in the Static"],"title":"A Signal in the Static","description":"Moving from Craft CMS to Hugo and Netlify"},"/avatars-io/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    21 Aug 2018\n  \n  \n\n  \n\n  I was having a read through some source code on a project and came across a reference to Avatars.io, which is a pretty nice service for fetching avatars.I'll be using this in future for something like Gravatar rather than having to hash an email and generate a link. For example I can do https://avatars.io/gravatar/some@email.here. If I wanted my Twitter avatar then it's https://avatars.io/twitter/tj_fogarty. It also supports Instagram, and Facebook.Check out Avatars.io← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["avatars-io"],"headings":["Avatars.io"],"title":"Avatars.io","description":"Avatars.io lets you quickly grab a URL to an avatar of yours from a few different services"},"/building-a-full-screen-overlay/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    05 Apr 2015\n  \n  \n\n  \n\n  I’m currently working on a project that requires a full-screen overlay for various components - I’m going to share what I have at the moment, though I’m sure it can be refined.DISCLAIMER: I’m not a mad bastard when it comes to JavaScript. I’m still learning.I’m using the incredible GSAP library for animating the various parts, and I’ve found that once you get into it, it’s an invaluable tool.\n\nIt also plays nicely with jQuery.animate() via a plugin if you’re so inclined.jQuery is being used as well, though you can easily use something like Zepto or anything else you fancy.The Overlay object is going to work as follows:var overlay = new Overlay(); - this instantiates the object, but doesn’t create it in the DOM.overlay.create(); - we then create an empty div in the page.overlay.show(); - this animates it in.overlay.hide(); - does what you imagine.overlay.destroy(); - removes it from the DOM.‘Mon!This is the start of our overlay. It’s basically just some configuration, and it can be modified to accept an object as an argument so we can specify what we want the properties to be. For the moment, however, this’ll work fine to get us up and running.Grand job, so let’s add it to the DOM when we call create().We’re also binding a click event in here that hides the overlay once clicked.Now we’re going to show it using TweenLite from GSAP. We’re going to pass in parts of the animate object we created earlier, and we’re going to pass these into a fromTo() method.That extra class is just a helper, and not necessary. It just prevents scrolling when the overlay is active.You’ll notice as well that the animate object specifies that we’re animating from display: block; to display: none;. These properties will be applied once the other properties have been animated. In this case we’re animating opacity using autoAlpha.The difference between opacity and autoAlpha is as follows, found on Getting Started with GSAP:\n\nthe same thing as “opacity” except that when the value hits “0”, the “visibility” property will be set to “hidden” in order to improve browser rendering performance and prevent clicks/interactivity on the target. When the value is anything other than 0, “visibility” will be set to “visible”.Hiding it is going to be the same idea as showing it. We’re just going to swap some of the arguments around:Finally, we need a method for destroying it.See the Pen Full-screen overlay by T.J. Fogarty (@tjFogarty) on CodePen.\n\nIt’s not the most incredible thing you’ve ever seen, but if you have modules that need an overlay, it’s easy to just drop this in for re-use.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["building-a-full-screen-overlay"],"headings":["Building a full-screen overlay"],"title":"Building a full-screen overlay","description":"A JavaScript approach to a full-screen overlay"},"/archive/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Text Selection Particle Effects\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Building an Appreciation System\n      \n      \n        \n          javascript\n        \n    \n      \n        Self-Host Google Fonts\n      \n      \n    \n      \n        Image Parallax and Blur with Tornis\n      \n      \n        \n          javascript\n        \n    \n      \n        Task Management\n      \n      \n    \n      \n        Multi-Select Checkboxes with React\n      \n      \n        \n          react\n        \n        \n          javascript\n        \n    \n      \n        Web Cloaks\n      \n      \n    \n      \n        Clever Logos\n      \n      \n        \n          inspiration\n        \n    \n      \n        Derived Stores With Svelte\n      \n      \n        \n          javascript\n        \n    \n      \n        Scrollable Container Controls with React\n      \n      \n        \n          javascript\n        \n        \n          react\n        \n    \n      \n        Vapid CMS\n      \n      \n        \n          cms\n        \n        \n          javascript\n        \n    \n      \n        Website Inspiration\n      \n      \n        \n          design\n        \n    \n      \n        HTML Imports & Component-Driven Development\n      \n      \n        \n          javascript\n        \n        \n          experiment\n        \n    \n      \n        Improving Client-Side Performance\n      \n      \n        \n          performance\n        \n        \n          guide\n        \n    \n      \n        Building a Table of Contents with the Intersection Observer API\n      \n      \n        \n          javascript\n        \n    \n      \n        Fathom Analytics\n      \n      \n        \n          analytics\n        \n    \n      \n        Avatars.io\n      \n      \n        \n          external-links\n        \n    \n      \n        A Signal in the Static\n      \n      \n        \n          cms\n        \n        \n          javascript\n        \n        \n          php\n        \n        \n          craft\n        \n    \n      \n        What Do I Know?\n      \n      \n        \n          life\n        \n    \n      \n        Create an RSS Feed Reader\n      \n      \n        \n          javascript\n        \n        \n          vue\n        \n        \n          video\n        \n    \n      \n        Upgrading to webpack 4\n      \n      \n        \n          javascript\n        \n    \n      \n        Do Not Track\n      \n      \n        \n          javascript\n        \n        \n          analytics\n        \n    \n      \n        My Local Environment Timeline\n      \n      \n    \n      \n        The Weary WordPress Dev\n      \n      \n        \n          wordpress\n        \n    \n      \n        Theming with CSS Custom Properties\n      \n      \n        \n          css\n        \n        \n          craft\n        \n        \n          twig\n        \n    \n      \n        Page Visibility API\n      \n      \n        \n          javascript\n        \n    \n      \n        Use AppleScript to Automate with iTerm\n      \n      \n    \n      \n        DIY RSS Feed Reader\n      \n      \n        \n          javascript\n        \n        \n          vue\n        \n    \n      \n        Craft Plugins Browser\n      \n      \n        \n          javascript\n        \n        \n          cms\n        \n        \n          craft\n        \n        \n          vue\n        \n    \n      \n        Variable Fonts\n      \n      \n        \n          css\n        \n    \n      \n        Client-Side Search with Algolia\n      \n      \n        \n          javascript\n        \n    \n      \n        Building My Site Part III: Fine Tuning\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Building My Site Part II: Setup\n      \n      \n        \n          cms\n        \n        \n          craft\n        \n        \n          twig\n        \n    \n      \n        Building My Site Part I: Decisions\n      \n      \n        \n          craft\n        \n        \n          webpack\n        \n    \n      \n        Building a 'Now Playing' Feature\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Tip for React PropTypes with Storybook\n      \n      \n        \n          javascript\n        \n        \n          react\n        \n    \n      \n        First Seven Jobs\n      \n      \n    \n      \n        Resourceful Learning\n      \n      \n    \n      \n        Vue.js and Spotify Experiment\n      \n      \n        \n          javascript\n        \n        \n          vue\n        \n    \n      \n        Up and Atom\n      \n      \n    \n      \n        The (Clip) Path of Least Resistance\n      \n      \n        \n          css\n        \n    \n      \n        Timber and Twig Reignited My Love for WordPress\n      \n      \n        \n          php\n        \n        \n          cms\n        \n        \n          wordpress\n        \n        \n          twig\n        \n    \n      \n        Expanding menu with GSAP\n      \n      \n        \n          javascript\n        \n    \n      \n        Lightweight Utility Object\n      \n      \n        \n          javascript\n        \n    \n      \n        Responsibilities of a Web Person\n      \n      \n    \n      \n        Getting Started with WordPress and Unit Testing\n      \n      \n        \n          php\n        \n        \n          wordpress\n        \n    \n      \n        Pace Yourself\n      \n      \n    \n      \n        Building a full-screen overlay\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Quickly build a simple grid with Sass\n      \n      \n        \n          css\n        \n    \n      \n        Wait, what am I meant to be doing again?\n      \n      \n    \n      \n        Web Project Boilerplate - Browserify with ES6\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Foundation 5.5\n      \n      \n        \n          javascript\n        \n    \n      \n        Front-end Strategy with a sprinkling of ExpressionEngine\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["archive"],"headings":["Archive","2020","2019","2018","2017","2016","2015","2014"],"title":"TJ Fogarty","description":"Performance focused Front-end Development."},"/building-a-now-playing-feature/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    18 Dec 2017\n  \n  \n\n  \n\n  As part of the rebuild of this site (which I'll write more about when things have settled) I thought it would be fun to add a feature that shows what music I'm currently listening to, or what I last listened to. The people need to know.I mostly use Spotify, and I thought they didn't support grabbing the currently playing song from their API. Turns out they support fetching the currently playing, and recently played tracks.\nI assumed it wasn't available and jumped straight in with something I had implemented before by using Last.fm. This works from the settings in Spotify to connect it to your Last.fm account. You can sign up for an API account if you want to go this route. Make sure to make a copy of the key you're given, as there's no facility available to see it again once you leave that page.Here's the plan:CSS custom properties are magic, and I'd like to use them to learn more about themJavaScript async/await for the requestNot everyone will see this, or care about it. It should be opt-in to save on a requestI'm using CSS custom properties to display content. As far as I'm aware it can be read by screen readers, but I'm happy to be corrected on that.\n\nThe idea is to have a custom property that has an initial value of Loading...:Then when the user triggers the request, the property will be updated with the track information, which is displayed like this:So before the request has completed, you're seeing Loading....Here's the CSS we need:And the corresponding HTML:The code required for this to work is minimal — we need a way to request the latest track, and update the custom property with the result.In the init function, it only fires when the trigger is hovered, and it'll only happen once per page load. There's no need to keep making the request after that.You can see the result in the bottom right corner of the site, in the future I'll probably refactor it to use the Spotify API. In the meantime, however, it works just fine.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["building-a-now-playing-feature"],"headings":["Building a 'Now Playing' Feature","#"],"title":"Building a 'Now Playing' Feature","description":"Show the world what you're listening to because it's important."},"/building-a-table-of-contents-with-the-intersection-observer-api/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    08 Sep 2018\n  \n  \n\n  \n\n  While planning out an upcoming post, I noticed there was quite a lot of content to cover with no easy way to navigate it. So, rather than actually write the post, I went off on a tangent and built a table of contents component. Great, back to writing... ah it'd be nice if it followed the user scrolling down the page. OK, done. Wait, it would be cool if I could highlight the currently active section...What I ended up with is by no means perfect; it doesn't highlight correctly when scrolling up until you reach a new heading. However, I think it does a decent job for now without using JavaScript to wrap each section in an identifiable container, and I can always improve it, or remove it entirely if it's not fit for purpose.I'm using Hugo to generate my site which comes with a useful tag to automatically create a table of contents. This works by finding all the headings, assigning them an id, and generating a list of links.To begin with, we need a document with some headings. These headings should have an id so we can use anchor tags to jump to that section of the document. We also need a list of links with the href pointing to each heading. The idea is that the basic functionality works without JavaScript enabled.The lists in the navigation are nested to reflect the hierarchy of the content. A h3 lives within the section defined by a h2, a h4 by a h3 etc...I'm sure you clever folks can make a cleaner job of this. I opted to avoid any plugins in an effort to learn more about what's going on, as well as keep the bundle size of my scripts down. That means there's no fallback support for browsers that don't support the Intersection Observer API. As of this writing, that means Internet Explorer.The first step I figured was to collect the list of links and headings in an article. I did this wrapped in an object to try and organise the code.The reason I'm destructuring into an array here: this.links = [...this.container.querySelectorAll('a')] is because querySelectorAll will return a Node List as opposed to an array which we can call filter, forEach, map etc... on.Then I map over the links, find the href and use that to collect the heading it links to.Before we got the Intersection Observer API, we would have attached an event listener to the window object on scroll. Then we'd check the current scroll position of the page, and measure it against the offsetTop of the element we wanted to check was in view. We could still do this, but scrolling can be expensive unless we debounce the listener. In any case, we'd be reaching into the DOM to pull out values, manually check them, and carry on.With this API, we can minimize the effort required by learning a slightly different way of approaching the detection of elements in the viewport.Let's take a look at a stripped back example that I've copied from the MDN link above:From MDN:The element that is used as the viewport for checking visibility of the target. Must be the ancestor of the target. Defaults to the browser viewport if not specified or if null.Margin around the root. Can have values similar to the CSS margin property, e.g. \"10px 20px 30px 40px\" (top, right, bottom, left). The values can be percentages. This set of values serves to grow or shrink each side of the root element's bounding box before computing intersections. Defaults to all zeros.Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed. If you only want to detect when visibility passes the 50% mark, you can use a value of 0.5. If you want the callback run every time visibility passes another 25%, you would specify the array [0, 0.25, 0.5, 0.75, 1]. The default is 0 (meaning as soon as even one pixel is visible, the callback will be run). A value of 1.0 means that the threshold isn't considered passed until every pixel is visible.With that information, I used the following options:I left out root as I wanted it to default to the browser viewport. I didn't need anything extra from rootMargin, and threshold made sense to activate for when 100% of the element is visible.For the observer itself, I needed to write a function for the callback, and watch the headings for when they become visible.So I create the observer, observe each heading, and check if any heading is in view. If it's in view, I give it a class, of is-visible, otherwise, I remove it. Scrolling up and down the page now I can see, via classes on the links, which headings are currently in view. Now to style the most appropriate one.This was a really fun one. It's my fault for skipping breakfast that it took so long to figure this out. While multiple headings might be visible at once, I only wanted the first available one to show an active state. That's straightforward enough with document.querySelector which will return the first match it finds. The problem I was having was that as soon as the heading went out of view, the active style would be removed even though I was in that relevant section of the document.The breakthrough moment was keeping track of the previously active section. With this, I could say \"OK, if there's nothing active at the moment, default to the most recently active section.\" That's what this.previousSection is doing for us.I'm grabbing the first visible link, then removing all other is-active classes. After this, I check if we actually have a visible section (we might be in between sections with no headings visible). If we find one, great; add the class and bail. If we don't find one, and we have a previous section, then that's what we highlight instead.See the Pen Scroll spy table of contents by T.J. Fogarty (@tjFogarty) on CodePen.\n\n\nI would be lying if I said this was well-thought out. It was a tangent within a tangent. I spent more time on this post than I did writing the code, and I'm sure there are things I've missed that could greatly simplify it. Give me a shout if you spot anything and I'll make amendments.In the final version, I also introduced smooth scrolling to items provided the user doesn't mind by checking for the prefers-reduced-motion media query.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["building-a-table-of-contents-with-the-intersection-observer-api"],"headings":["Building a Table of Contents with the Intersection Observer API","#"],"title":"Building a Table of Contents with the Intersection Observer API","description":"How to build a live-updating table of contents using Intersection Observer."},"/building-an-appreciation-system/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    22 Jun 2019\n  \n  \n\n  \n\n  I've wanted to get around to building a little system for \"liking\" or \"hearting\" a post. A may be a small side project, but it's also a chance to experiment with new things. I wanted to display the number of upvotes a post has and let someone upvote it themselves with a tap or a click.A little while back I saw Sheetson  (great name); it lets you manage a Google Sheet with a quick to learn api. The setup involves sharing edit access to a sheet with an address listed on the site, and once that's done you're good to begin. This seemed like the perfect tool to help with my project, as I'm working on a static site here. I could have gone with lambda functions, but this seemed a little neater, and everything could be kept client-side.Note: Whenever I shared a sheet to that address I'd get an error email from Google saying it didn't exist, but rest assured it'll work when you make the api calls. Another thing that caught me was it wouldn't work unless there was already a row of data in there. So I first had to manually input some dummy data. Though don't rule out the possibility of me doing something stupid.The first thing I needed to do was decide on the structure of my sheet. I only needed to record two bits of info: something to identify the page by (in this case it's the slug or path), and how many votes it has.After this, the next step was to build out a few helpers to interact with the api. I wanted to do 3 things - get all the records, update a record, and create a new record. To do this I leveraged the Request and fetch api.If you've ever used axios, and created an instance with it, then imagine this follows the same kind of idea. I created a new instance of the Request class, and wrapped it in a fetch for each of the other methods. To get them all, I appended a query string for the limit as by default it'll fetch 24. If you have more than 100 you'll need to paginate through the results.The next step was to build it into the page. With the above code in place, you can make it your own in any JavaScript project, but since I'm running Svelte on my site already, I decided to run with that.I'm using stores to hold my data like so:The current record is derived from the existing state - it'll find the record with the pathname of the current page.Next up is the component itself. The first thing to do is to get my imports and local variables in order:Next we need to subscribe, or listen, to record so we can assign it to currentRecord and use it in our code:In the Svelte docs, it's recommended to fetch our data in onMount in the cases of server-side rendering. I'm not too concerned with that here, but I think it reads a bit more familar to other frameworks.The last bit of code we need then is the click handler for the button:In here, we check if there's an existing record. If there isn't we'll create a new one, which will give it a vote of 1.\n\nOtherwise, we update the existing one. I needed to do a parseInt on the vote count, as it was being returned as a string.The last thing to do was to add the markup to the Svelte component. It's a little repetitive, but I wanted to make it so after the interaction it becomes a display. It also eagerly updates the vote, so while the request happens in the background, we'll assume it completes by showing the future value straight away.You can see the full component code here.All that's left is to kick it all off:It was a fun Saturday afternoon project that I'm glad I made time for. If it doesn't get much usage, then I'll rebrand it so it's a thumbs down instead, If that gets more traction then I'll need to re-evaluate my life.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["building-an-appreciation-system"],"headings":["Building an Appreciation System"],"title":"Building an Appreciation System","description":"Using Google Sheets as a back-end, we can record likes on anything we want on a static site."},"/building-my-site-part-i-decisions/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    06 Jan 2018\n  \n  \n\n  \n\n  Making decisions can be an arduous task. With the blitz of build-tools and boilerplates it can be surprisingly complex to arrive at a well-informed selection of technologies. It seems like the more you know, the less you do.With that, here's what I ended up with, and why.Craft CMSLaravel MixDigital OceanLaravel ForgeBefore all this I had a self-hosted version of Ghost. It's a deadly platform and incredibly easy to get up and running with. After a while I decided to move to a hosted version with them when I had less time for maintenance. It was less for me to think about. It also meant I couldn't break the server which happens when I start tinkering too much. I could rest easy knowing these folks had it all sorted.When I had a bit more time, I moved to GitHub Pages to have a bit more control over the build. I really liked the idea of being able to make theme-related changes that take effect with a single git push.Not long after, I started to long for a bit more control over the functionality not only afforded by the front-end, but by what happens behind the curtain as well.This is the new cool kid on the block, and I wanted to see what it was all about. After looking through a few options, I had a go of Contentful. I had a blog prototype set up pretty quickly with Vue.js as a single page application. It was pretty nifty if I do say so myself. I gave myself a pat on the back and thought \"yep, this is it\".After about 20 minutes, however, I realised I needed server-side rendering to make it more accessible. I wanted to get the ball rolling quickly, and this was something that I felt would be a bit of a time sink. I scrapped it and decided to keep moving.I've worked a lot with PHP-based projects including WordPress, ExpressionEngine and Laravel. I wanted to use something that I was familiar with in order to extend it with any custom functionality I might need/want. The Twig templating language is also something I'm quite fond of when it completely changed how I worked with WordPress Lucky for me, this is where Craft came in.I've used it before, and really liked how straight-forward it was to get going with. I thought about using WordPress, and while I still have great time for it, I wanted to explore something different.Craft is also nearing it's release of version 3, so I figured it was a good time to get back into it and see what's changed since I last used it. Spoiler: it's looking pretty frickin' good. They also have a generous pricing plan for personal use: it's free!With that I pulled down the latest version of V3 that was available and started porting my posts over.Again, familiarity. Laravel Mix wraps itself around webpack like a blanket with a high thread count, and gives you a dead-simple way to get up and running quickly. If you need to dig deeper you can extend the configuration to suit your needs.It was recently updated to include async/await straight out of the box, which is one less thing to hack about. I like not having to think sometimes, even if that saves me manually adding a dependency and updating a dotfile.I stated earlier that I have a tendency to break things when I have the terminal open in front of me. Time progressed and since then I've learned enough to be dangerous. I signed back up with Digital Ocean because this time I had a secret weapon — Laravel Forge.Forge is suitable for any PHP project, and provisions a server with a few clicks. It also lets me watch a branch on a repo and can deploy any time a push is detected. It'll run a script as well, which means I can run things like npm run production to create a production build of my assets.This has led to the site you're currently on today. I can't say it will always be this way, but for now I'm really happy with the end-result. You might notice the common theme of familiarity with these decisions. That was something that occurred after the ideas had settled. I wanted a solid base to work from, something that I had initial experience with to get something up and running quickly. Who's to say I won't end up with a headless CMS? Maybe when I learn more about server-side rendering I'll pick up where I left off. Until then, I have more reasons than ever to keep tinkering and exploring what else I can do with this setup.Read Part II: Setup← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["building-my-site-part-i-decisions"],"headings":["Building My Site Part I: Decisions","#"],"title":"Building My Site Part I: Decisions","description":"Building my website with Craft CMS."},"/building-my-site-part-ii-setup/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    07 Jan 2018\n  \n  \n\n  \n\n  In the first part of this series I talked about the decisions that led to using the likes of Craft and Laravel Mix. So now it's time to get it all up and running.At the moment, while Craft is in it's release candidate stage, it's only available as a Composer package. This is set to change once it's ready for a wider release.I'm using Valet for local development, but you can use whatever suits your workflow provided it meets the requirements, with the main ones being PHP >;= 7 and either MySQL 5.5+ or PostgreSQL 9.5+. It's worth looking at the full list of requirements to see what PHP extensions are required as well.To get a starter project installed, you can run:And within your new project you'll find the file .env.example which you can rename to .env. This is where you'll fill in your database details, along with any other secrets you want to keep from prying eyes. (If this is going in a git repo, make sure you add .env to your .gitignore.)Finally, then, visiting your new site will prompt the installation wizard to begin which you can follow through to install Craft.Already, Craft 3 has quite a collection of great plugins and I wasted no time in going through them. To be honest, I only had a few ideas of the things I needed, the rest fell into my life as I figured they'd be nice to have.Contact Form - \"Add a simple contact form to your Craft CMS site\"HTTP2 Server Push - \"Automatically add HTTP2 Link headers for CSS, JS and image assets.\"Typogrify - \"Typogrify prettifies your web typography by preventing ugly quotes and ‘widows' and more\"Mix - \"Helper plugin for Laravel Mix in Craft CMS templates.\"Doxter - \"Markdown Editor & Parser for Craft 3.\"Redirect Manager - \"Manage 301 and 302 redirects with an easy to use user interface.\"Mailgun - \"Mailgun integration for Craft CMS.\"Pic Puller - \"Integrate Instagram into Craft CMS.\"\n- Scout - \"Craft Scout provides a simple solution for adding full-text search to your entries. Scout will automatically keep your search indexes in sync with your entries.\"\n\nFor the most basic setup, I needed a way to create and display posts. To get started, I went to Settings >; Sections and created a new section called Posts. The section type was left as Channel and I updated the Entry URI Format to {slug} and the template to posts/_entry.Next, I needed to create a field for this section to store my post content. Back we go to settings and then Fields to click New Field. I gave it the name of Post Content which generated the handle postContent which I'll use in the templates to get the content. After this, I set the field type as Doxster to use Markdown.Finally, I go back to `Settings >; Sections` and add an entry type to Posts. From here I used the drag and drop editor to assign my `postContent` field to the section.After adding some posts from my old setup, it was then time to dig into the template. Remember when I added the `posts/_entry` information to the template field for the section? Craft maps this to your templates directory, so creating the folder `posts` and the template `_entry.twig` inside it will work to display a single post. At it's most basic, it looks like this:\nThe layouts/default file is essentially our html, head and body tags which surround our post template. Within the body, you'll have `` which will signal to Twig to drop the above in that spot.Next up, I needed to create a listing of those posts on my homepage, so I created the file index.twig in the root of the templates folder and added the following:I added in some filters like striptags, slice and raw for the post preview to display a little excerpt from the post content. With that, the basic site was up and running.Alright, the data is flowing through the templates like the life-blood that it is. Next I needed to inject some styling into the site, peppered with some JavaScript for a few cool interactive features.You could argue that for something simple, webpack just isn't needed, and you'd be absolutely right. There's nothing wrong with a single CSS file and a few script tags since that's what it all boils down to anyway. I wanted to use some features of JavaScript that needed something extra for them to work across multiple browsers. I felt it would be conducive to a more scalable codebase when things get tacked-on down the line. I could be wrong, but I'm willing to give it a go.Laravel Mix makes it easy to get started in any web project, as seen in the installation docs it's not just for Laravel.For example, if I want to have my JavaScript & Less transpiled I can do the following in my webpack.mix.js file:It kinda reminds me of Gulp a little bit, and you can always extend it further with plugins or other configuration options.With that, I can run npm run watch to watch my files for changes. In my deployment script I have npm run production for an optimised build.So with that, I had a Craft installation set up with my posts, templates were set up to display them, and I had a build process for my assets.There's still more to do, such as fine-tuning for performance, which I'll cover in a later article. For now though, we have a pretty good start!Read Part III: Fine Tuning← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["building-my-site-part-ii-setup"],"headings":["Building My Site Part II: Setup","#"],"title":"Building My Site Part II: Setup","description":"Setting up my new website with Craft CMS."},"/clever-logos/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    17 May 2019\n  \n  \n\n  \n\n  I was digging around in my bookmarks, and came across CleverLogos. It's a great resource for getting a bit of inspiration, or just passing the time by admiring the ingenuity of the minds behind these logos.Visit CleverLogos← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["clever-logos"],"headings":["Clever Logos"],"title":"Clever Logos","description":"A collection of clever logos. Great for getting the brain going when you're looking for inspiration.","image":"https://res.cloudinary.com/dab4jaczr/image/upload/w_1200,f_auto,q_auto/v1536498344/clever-logos.jpg"},"/building-my-site-part-iii-fine-tuning/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    08 Jan 2018\n  \n  \n\n  \n\n  After making some decisions and implementing them, it's now time to tidy a few things up and improve on performance. I'm going to talk about the ways in which I've improved the loading of fonts, CSS and JavaScript.I previously read an article called 23 Minutes of Work for Better Font Loading and it's a brilliant piece of work outlining the ways in which font loading can be improved. I didn't follow every step, but the two I implemented really made a difference:First, preloading the web fonts by putting these tags into the <head> of my site:Secondly, adding those fonts to my service worker using the SW Precache Webpack Plugin.I opted to use the Tailwind CSS Framework to style my site. I found it a great way to throw a bunch of classes on my elements to rapidly style them, and abstract them out into their own classes once I was happy with them.If you have a look around, you might notice that there isn't a whole lot of style here. That may change in the future, but it also reminded me of Harry Roberts' website where he inlined his styles within the <head> of his site rather than using a <link> tag.Fair enough, but there's a lot of CSS being pulled in with Tailwind that wouldn't make sense to include. I'd only be needlessly increasing the weight of my page. Thankfully the author of this framework has a solution! PurgeCSS to the rescue:This scans through template and JavaScript files, and strips out any classes that are not being used.In layouts/default.twig I inline it using the Craft Mix plugin:There's some JavaScript on my site that isn't required to be loaded with every single page, those being highlight.js and Algolia Search. Not every page requires syntax highlighting, and not everyone will click the search icon, so I needed a way to only load them when it was necessary. I did this with Dynamic Imports and some tweaking of my webpack.mix.js file.When I was first using it, the chunks that were created were either dropped into the wrong directory, or the path they were loaded from were incorrect. Here's what I added to my configuration to correct it:Let's look at syntax highlighting first. I wanted to check if a page had code on it, and load the library in if it did.Using the comment /* webpackChunkName: \"hljs\" */ I could specify the name of the generated file. Otherwise you'd end up with files called 0.js, 1.js etc…\n\nNext up is the search. I've stripped out most of the interaction code here, and left in the loading of the required library:I have an index for my local development version, and the production version. I have a function called env which helps me with which environment I'm in:After all this, I have a deployment script that runs npm run production which minifies my assets, generates a service worker, and strips out unused CSS classes. Coupled with the font loading techniques I have a zippy little site.There's more I can do, however. Maybe there are smaller libraries out there that I can swap in, or some optimisations I can make to my artisanal, hand-rolled code. I could add the JavaScript to the service worker, though I have cache-invalidation trust issues that I need to work through first.Until then, you can see the source code for this site as it stands today.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["building-my-site-part-iii-fine-tuning"],"headings":["Building My Site Part III: Fine Tuning","#"],"title":"Building My Site Part III: Fine Tuning","description":"Final tweaks and performance improvements for my website."},"/client-side-search-with-algolia/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    09 Jan 2018\n  \n  \n\n  \n\n  I'm going to walk through creating a search feature using Algolia. I'll be using some new features of JavaScript as well, such as async/await, but it can be accomplished just as well without it, and I'll offer up alternatives where it applies.It's not going to be a magic bullet for everyone, but it's interesting to see how it works, and it can be a solution to add to your toolkit.An Algolia account (there's a free tier, as long as you add their logo to your search area)Some content you want to be searchableA way add your records to an index (you can do this manually, use the API, or if you're using a CMS or a framework there are plenty of solutions readily available)\"Record? Index? What are you on about?\" An index is something that holds the data you want to be searchable, and a record is a piece of that data. For example, you could have an index called \"posts\" that's made up of records of which each represents a  single post. Kinda like:Or maybe I ruined it. Nam facilis doloribus? Essentially you can then tell Algolia which parts of your posts it can search on. This can be the title, some content, tags, categories etc… and you can weight them by importance. So a query matching one of your post titles would bump that result to the top over a match in the content of another post.\n\nIn the API section of the Algolia dashboard you'll find your Application ID, your Search-Only API Key, and your Admin API Key. If you're using a CMS or framework with an Algolia integration available, there will be spaces for you to enter these. You can also restrict HTTP referers to ensure search will only work on the domains of your choice.\n\nI'll be using the JavaScript search client, and more specifically the lite client which limits the usage to search only, which will do the job. It'll also save on file size.\nLet's install it:Next up we'll set up our search input:Those .js- prefixed classes will be our hooks. They're not for styling, so it makes the intentions clear when you're looking at the code that some JavaScript is at play here.For the JavaScript, we'll grab the lite client, and scaffold out some code:So we're grabbing our .js- prefixed elements here, and setting up the Algolia client with our credentials to prepare it for the search.\n\nWhen they keyup event is triggered, it'll call the performSearch method. It's in here that the query to Algolia is made:I'm using async/await here, but you can use promises as well:We're getting closer to displaying the results. To start with we'll outline how the flow works. If we have results, display them, otherwise we'll let the user know nothing was found. After this we'll see about constructing the search hits to inject into the results container:In displayResults we're calling getResultLink which we'll use to append the the results container:And finally here's the snippet in it's entirety:With that, you can call Search.init() to kick it all off.No longer do your quality posts need to be buried pages deep, never to be seen again. We've gone through using the lite client to save on file size, but you can use other full-fledged solutions for the framework of your choice for a more out-of-the-box experience.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["client-side-search-with-algolia"],"headings":["Client-Side Search with Algolia","#","#\" %}"],"title":"Client-Side Search with Algolia","description":"Adding client-side search with Algolia."},"/craft-plugins-browser/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    04 Feb 2018\n  \n  \n\n  \n\n  I often find myself browsing plugins for Craft, and wanted a little resource where I could do just that searching a name, or sorting by downloads and GitHub stars.It's built with Vue, and uses the Packagist API.You can browse the source, or see the demo.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["craft-plugins-browser"],"headings":["Craft Plugins Browser"],"title":"Craft Plugins Browser","description":"A small project to browse Craft CMS plugins by popularity."},"/create-an-rss-feed-reader/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    29 May 2018\n  \n  \n\n  \n\n  Recently, I was contacted by the folks at Skillshare to create a class. I've never done videos before, and really dislike hearing my own voice, but I was interested in giving it a go.They were very helpful in getting me set up, and even did some editing work to tidy up the final result.In the video I walk through creating an RSS feed reader with Vue.js, and Netlify using their functions feature to deploy to AWS Lambda to fetch the feeds. Have a go if you're interested and give me a shout if there's any questions!Watch: Create an RSS Feed Reader with Node and Vue.js.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["create-an-rss-feed-reader"],"headings":["Create an RSS Feed Reader"],"title":"Create an RSS Feed Reader","description":"Performance focused Front-end Development."},"/derived-stores-with-svelte/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    15 May 2019\n  \n  \n\n  \n\n  Svelte has been getting a lot of attention recently, and rightly so. If you've used the likes of Vue or React in the past then Svelte won't be a million miles away. I recommend following their interactive tutorial if you're interested.Coming from a Vue background, one feature I love is computed properties. If you want to store some sort of value that depends on the reactive state, but you don't want to manually update it when state changes, this is where they come in. For example, a greeting property could return something like \"Hello, ${this.name}!\". Vue knows to update greeting whenever name changes.Svelte offers a similar solution in what it calls derived stores. To show how this works, I created a small app that takes a JSON feed and lets us filter it. The feed contains a list of jobs, and I want to be able to search by job title, and only show remote jobs via a checkbox.The initial stores would be as follows:At some stage, when the app is ready, the jobs store is populated with an array of jobs from the feed. When I type in the search input the searchTerm store is updated, and when I toggle the remote-only checkbox, the remoteOnly store is toggled.Ideally what I'd like to do is avoid editing the jobs store. I'd like to keep the original list untouched so I can return to the original state.This is where I can use derived stores. First I need to import it by updating the top-level import statement:Now I can declare my derived store.The first argument is the store or stores, I wish to derive from. You only need to pass an array if you wish to use more than one. The second argument here is the callback, which gets passed the stores we asked for. At the moment we're returning the original jobs store untouched. Let's create a function to show only the remote jobs:A remote job here is any job that doesn't have a location set. If remoteOnly is set to false we'll return the jobs array early.A similar approach is taken for the search term. It's not the most robust of searches, but it does the job:If we work from the inside-out, we'll see filterByRemote returns an array of jobs, which then becomes the first argument in the call to filterBySearchTerm.That's my first experience with Svelte. Hopefully not the last as it's a refreshing take on what I've been doing previously.See the demo\n\nView the source← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["derived-stores-with-svelte"],"headings":["Derived Stores With Svelte"],"title":"Derived Stores With Svelte","description":"Getting up to speed with derived stores in Svelte and how they compare to something like computed properties in Vue."},"/diy-rss-feed-reader/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    12 Feb 2018\n  \n  \n\n  \n\n  There’s a whole heap of services and apps out there for collating your own personalised list of RSS feeds, and discovering new ones. They all work pretty well, and I’d happily recommend a good few of them.However, I’m a simple guy with simple needs. So simple in fact, that I figured I’d build my own. I know how that comes across, and the more I re-type and re-read that line the more I hate myself, but I don’t need a lot of features; I want to have a list of feeds, a list of articles for a feed, and a view for a single article. I don’t need a ‘save for later’ feature; I can use Instapaper for that. I don’t need a way to share them; I can use something like Buffer. I want to read a thing, that’s all.I like JavaScript, and having a JSON object with data in it that I can iterate over is ideal. How do I get that JSON, though? After a couple of keystrokes on NPM I found rss-parser. It does exactly what I was looking for; you pass a URL to a feed, and get JSON back.This is too straight-forward, though. How do I overcomplicate this?I created a little project that uses Express to respond to a GET request which returns my feed data.Running node index.js and visiting http://localhost:5000 in your browser then should return a bounty of data.You could do this with any language you fancy. You might already have a hosting plan where you can fire up a PHP script to do the same thing. For me, I chose Heroku because of their free plan and integration with GitHub. It suits me to add a feed to the list by updating an array letting Heroku deploy it.To get going with Heroku I needed to do a few things:Sign up for the free planCreate a new Node.js app from their dashboardFinally, from their dashboard, enable GitHub integration and select the repo and branch I wanted and enable automatic deploysNext was some configuration — I needed to tell Heroku how to run the app.To specify what command to run (in this case node index.js), I created a new file called Procfile in the root of my project. This file contains some process types, and there’s a few, but in this case we only need the web process type to fire up our little Express app. So with that, our Procfile looks exactly like this:The final piece was to create an app.json file. This acts as a sort of description of our app. In this case, it’s a name, description and what docker image to use. The docker image will contain the environment of our app, in this case it’s Node.js.After pushing your changes, you should see from the dashboard that your app is deploying, and when it’s ready clicking on Open App in the top-right corner of your dashboard opens it up in a new tab.On the free plan, the app will softly fall asleep if there’s been no traffic to it for 30 minutes. It’ll wake up again on the next visit, but it’ll just take a few moments before you get a response while it fumbles for the alarm clock to turn it off, or maybe burst it off a wall.So this is where it gets far less specific. The means are there to get the data, now it’s a matter of how to display it. For me, I used Vue and hosted it using CodePen Projects. You can have a look at the source and the demo if you’re interested. I mostly work with React, so any chance I get to use Vue I usually take it.It was a pretty fun weekend project and it gave me the chance to play with some technologies that I otherwise wouldn’t get to use. I treat these projects like a playground for some interesting tech I want to learn while also solving a problem for myself. I wanted an RSS reader that I could tinker with, so now it’s there. I’ll probably keep iterating on it, but it raised an interesting thought for me: I spend my life building things for clients to solve their problems. Why not build something for myself, and sort my own stuff out?← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["diy-rss-feed-reader"],"headings":["DIY RSS Feed Reader","#"],"title":"DIY RSS Feed Reader","description":"Building your own Feed Reader with Vue.js and Node"},"/do-not-track/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    15 Apr 2018\n  \n  \n\n  \n\n  When I first began writing posts for my own website, I was keen to get an insight into how people were finding my blog, what pages were most popular, and generally nerding out with the real-time dashboard in Google Analytics to see visitors from different parts of the world.Those things definitely still interest me, but over time I haven't really used any of the information I get in a meaningful way. I imagine for other sites it's more useful, especially if you need to run some ads, or it's part of your income or a service you offer and you want to see if users are hitting any issues. That's super important stuff, and I don't see a problem with it. The way it looks to be going now, however, is that it's becoming more of an opt-in experience rather than one of opt-out.This is a pretty small site, and since it's developer-focused I'm imagining a good number of visitors have some sort of ad blocker enabled. I have one myself, and sure I'll disable it for sites I trust, but for the most part it's left on by default. I've been recently toying with the idea of removing tracking altogether for my site in it's current state, but first I wanted to see if there was any middle-ground to explore. Enter navigator.doNotTrack.I found some docs on MDN describing how it can be used, and there's a difference in behaviour across browsers. It seems by default in Chrome and Safari, the value is null, whereas in Firefox it's \"unspecified\". If you call navigator.doNotTrack and it returns a string value of \"1\", then it means the request prefers no tracking. I'm going to be leaning more towards an opt-in approach, however if it returns null then I'll enable Google Analytics. You can find this option in your browser settings. In Safari it's under Privacy, and in Chrome and Firefox you can search your settings for 'do not track'.Here's how I'm checking at the moment:It would be nice if it always had a value like Firefox does, but I'm gonna roll with this for now. Chances are it'll completely disable tracking for Firefox users, and enable it for Chrome and Safari users if they don't say otherwise which kinda circumvents the opt-in approach. Short of removing analytics altogether I think this is an OK approach for now.I'm using the ga-lite package to bundle everything so I have cleaner control over how tracking works.The env() call is a utility function I can use so I don't run it when developing locally.So now when I call Tracking.setup() and Tracking.sendPageView(), it'll do it based on the result of the hasDoNotTrackEnabled function.I'll keep this going for a while, and probably end up removing tracking altogether at some stage. Just to re-iterate though, I have no problem with sites using some form of tracking. This is more of a personal decision. It'd be nice if it got to a stage where something like Carbon Ads would be needed to help pay for hosting, and I'd reconsider then if I needed to get a rough estimation of traffic. At the end of the day it's a tool to be used, and we shouldn't be shamed out of taking advantage of it (provided it's not for nefarious reasons, of course).← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["do-not-track"],"headings":["Do Not Track"],"title":"Do Not Track","description":"How to use window.doNotTrack to decide when to use tracking."},"/expanding-menu-with-gsap/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    27 Jul 2015\n  \n  \n\n  \n\n  This is a straightforward enough bit of code that will allow you to create a re-usable expanding menu.There are many, many ways you could go about this. I figured a simple Object would be enough for this example.See the Pen Expanding Navigation by T.J. Fogarty (@tjFogarty) on CodePen.\n\nWe'll start with the mark-up. The most important bits are:Class of js-nav-toggle on our triggerdata-nav-id also on our triggerCorresponding id on our nav element which corresponds with data-nav-idOur script watches js-nav-toggle for a click, and figures out the navigation from it's data-nav-id attribute.In terms of styles, I've set the navigations to display: none; which you can glean from the CodePen embed above. Everything else is just to make it look somewhat presentable.The script has been documented, and we're using TweenLite.fromTo(el, duration, from, to); to animate them back and forth depending on their active state.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["expanding-menu-with-gsap"],"headings":["Expanding menu with GSAP"],"title":"Expanding menu with GSAP","description":"Performance focused Front-end Development."},"/fathom-analytics/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    24 Aug 2018\n  \n  \n\n  \n\n  I've been going without any sort of analytics for my website for a number of months as I just wasn't happy with giving all that information to third parties. Plus, this is a fairly small operation here, so it's not exactly a requirement of mine.That being said, I've been keeping an eye on Fathom Analytics as it looks like an ideal solution:It tracks users on a website (without collecting personal data) and give you a non-nerdy breakdown of your top content and top referrers. It does so with user-centric rights and privacy, and without selling, sharing or giving away the data you collect. It's a simple and easy to use for website owners at any technical level.Looking at the source, it also respects the \"do not track\" preference of the user.I've been holding off on giving it a go because I had no idea how to install it, until a nice person on Github gave a quick run-through of how to get it running on Heroku. I'm trialing it using a Hobby dyno which costs $7 a month, so if it all works out I'll happily front that cost.You'll need a Heroku account, and the Heroku CLI to follow along. You'll need to have your billing details filled in as well as it makes use of addons for getting a database. You don't have to use a Hobby dyno either if you just want to see what's involved.So without further ado, the commands are as follows:$ git clone https://github.com/usefathom/fathom.git\n\n$ cd fathom$ heroku create$ heroku container:push web$ heroku container:release web$ heroku config:set FATHOM_DATABASE_DRIVER=mysql FATHOM_SECRET=whateverGeneratedSecretYouWantToUse$ heroku addons:create jawsdb:kitefin$ heroku config:get JAWSDB_URL //mysql://user:password@host:3306/database_name$ heroku config:set FATHOM_DATABASE_NAME=database_name FATHOM_DATABASE_USER=\"user\" FATHOM_DATABASE_PASSWORD=\"password\" FATHOM_DATABASE_HOST=\"host:3306\"$ heroku run ./fathom register --email=something@email.com --password='yourpassword'I'd say it took about 15 minutes to get up and running, which is pretty good going for me. I'm looking forward to what the future holds for Fathom.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["fathom-analytics"],"headings":["Fathom Analytics","#"],"title":"Fathom Analytics","description":"Installing Fathom analytics, an open-source alternative to traditional web analytics, on Heroku."},"/first-seven-jobs/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    06 Aug 2016\n  \n  \n\n  \n\n  Well, more like six-ish. If even.When I first saw #firstsevenjobs my first thought was \"oh, I haven’t had that many jobs, I guess this isn’t for me\". I suppose I took it a bit too literally.Some of the jobs I have had were more short internships that I wouldn’t really count as a \"job\". They were more like a baby-sitting exercise for someone else.That being said, I figured I’d talk a bit about the experience I’ve had that led me to where I am at the moment.I must have been about 12, or 13. I would cover for a friend of mine during the summer for a few years. I’d receive a couple of hundred bundled papers, divvy them up, and load them into my shoulder bag.It was great pocket-money, and I got offered cigarettes in exchange for a paper from those not on my route. I’d politely decline as I wasn’t cool enough to smoke.Any remaining papers would be dropped off at a local nursing home, and I’d receive my pay in a brown envelope. I think it was about 16 pounds. I was swimming in penny jellies and copies of Top Gear magazines.In secondary school, we had two rounds of internships to do in 4th year. I applied to the Limerick Post, which was the paper I used to deliver.I must have looked really important running around town in an oversized shirt with envelopes tucked under my arm. I remember one occasion I was bringing something to a hairdressers, and the owner greeted me with a great big smile, waving a scissors around. He thanked me for the envelope, and told me to get out.For the second part of my work experience, I was working on a really old Mac, using Quartz and Photoshop. This was my first real taste of digital design, and I loved every moment of it.My supervisor was explaining something to me once, and I had to stop and get a glass of water because I had lost vision in one of my eyes. Keep hydrated folks.In college, we had 6 months work placement. At this point, I was undecided as to whether I would become a designer, or a developer. In my 6 months I got to experience both sides, and concluded that I loved developing. Even if I was fixing IE6 bugs, it was exciting to solve these kinds of problems.Straight out of college I managed to land a job as a front-end developer. It began as an internship, but over the course of 2 years I had graduated to Lead Developer. This was a formative experience, and it really fuelled my passion for web development.I finished my previous job on a Friday, and moved from Limerick to Waterford for my partner and a new job. I began work on the Monday. It’s been 2 years now, and it’s going great. Easily the best life/work decision I’ve ever made.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["first-seven-jobs"],"headings":["First Seven Jobs","#"],"title":"First Seven Jobs","description":"Performance focused Front-end Development."},"/foundation-5-5/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    14 Dec 2014\n  \n  \n\n  \n\n  Foundation 5.5 has arrived, and It's lovely to see that great work has continued even with all the efforts going into the recent release of Foundation for Apps.This release also contains a contribution of my own (woo!) which allows you to execute code based on the current media query. It means you can check things like Foundation.utils.is_large_up() or Foundation.utils.is_small_only() which I've found to be pretty useful.You can see the pull request here.Full list of what you can do:← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["foundation-5-5"],"headings":["Foundation 5.5"],"title":"Foundation 5.5","description":"Performance focused Front-end Development."},"/front-end-strategy-with-a-sprinkling-of-expressionengine/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    13 Dec 2014\n  \n  \n\n  \n\n  My aim in the past while has been pointed towards front-end development, and exploring the different ways in which to produce a tidy result.These examples point to ExpressionEngine paths, but you can customise them to any project you’re working on. I’m relatively new to the ExpressionEngine game, and some of what I’m going to outline will be eventually replaced by Niall O’Brien’s EE Foundation generator, so that’s definitely something to keep an eye on.As with many things, we start with Gulp. This will handle our assets and do some nifty things such as generating our critical CSS and automatically injecting our Bower components whenever we update them. See below for an example setup:This is just the standard-fare Gulp setup. We’ve got tasks for watching and compiling our assets. It’s the structure of these assets that I want to talk about.I’m using Sass (SCSS syntax), and I’m borrowing heavily from MVCSS for the structure. It’s a simplified version (i.e. I’ve left things out) to a point where I find it easier to manage.This is the foundation of the project, where we establish defaults on tag-level elements, define variables, layouts, mixins… The files in here might go as follows:_base.scss — our tag-level styles._config.scss — definition of our variables, fonts etc…_helpers.scss — mixins, placeholders, utility classes._layout.scss — grid-type classes._reset.scss — I like to use normalize.css← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["front-end-strategy-with-a-sprinkling-of-expressionengine"],"headings":["Front-end Strategy with a sprinkling of ExpressionEngine","#"],"title":"Front-end Strategy with a sprinkling of ExpressionEngine","description":"Performance focused Front-end Development."},"/getting-started-with-wordpress-and-unit-testing/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    09 Jul 2015\n  \n  \n\n  \n\n  Recently, I've begun working on a project built with WordPress. One of the requirements involves writing tests and outputting a report.In this post, I hope to show how I've set up the project to utilise PHPUnit and WP_UnitTestCase. I've had minimal exposure to PHPUnit in the past, so I was delighted to start learning more.Hey, you might read this and know a better way! Feel free to leave a comment.You'll need an install of WordPress. This might be an existing project, or a fresh install. WP-CLI is a very handy tool for quickly setting this up, but it'll also do many, many other things for you that I won't cover here e.g. exporting a database, and even installing plugins.Next up, you'll need Composer installed. I'm using this to install PHPUnit globally with the command composer global require \"phpunit/phpunit=4.7.*. You can verify the successful installation with phpunit --version in your terminal provided you have Composer packages added to your path. (To do this, see this useful post.)Within the root of your WordPress project you'll need to run svn co http://develop.svn.wordpress.org/trunk/tests/phpunit/includes/.\n\nThis integrates with PHPUnit to make writing our tests a little easier. Want to create a post? $this->factory->post->create(). Want to create 30 posts? $this->factory->post->create_many(30). This goes for posts, users, comments, categories; anything you might need to generate. You can browse the source to learn more about it.This doesn't have to be in the root of your project, but this just happens to be where I've set up mine. You should now see an includes folder in your project root.You'll need a phpunit.xml file in your root to specify some configuration. It'll tell PHPUnit which files to use for it's tests.What this is saying is it's looking for a folder called tests and a file called bootstrap.php. This is what will kick it all off, and <directory prefix=\"test-\" suffix=\".php\"> says that test files begin with test- and have the extension of .php. So go ahead and create that tests folder and bootstrap.php.For starters, here's what your bootstrap file might look like -What we're doing here is setting up some initial state for our tests. I'm setting the theme and the plugins that I want to be active, and that's about it.Now, what are we going to test on? We'll need to create an empty database in order to run our tests against.\n\nCreate a file called wp-tests-config.php in the root of your project. It'll contain information regarding your test database which you'll need to create.No more set up, let's start writing tests!So now you have this tests directory with a lonely bootstrap.php file sitting in it. Let's give it some company with a simple test to see if the active theme is the one we set in that bootstrap file.Create a new file called test-active-theme.php and put in the following:Have a look there and you'll see we're extending WP_UnitTestCase. This affords us some useful perks in that when we run our tests it re-creates the database for a fresh WordPress install.Success! In your own tests, you can access your regular WordPress functions, and your active plugin classes/functions. You might even include some Composer packages to mock your data (like Faker).See the PHPUnit documentation for more information on the tests you can run, and how you can export the results.For further reading, have a look at the tests written for WordPress Core.Happy testing!← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["getting-started-with-wordpress-and-unit-testing"],"headings":["Getting Started with WordPress and Unit Testing","#"],"title":"Getting Started with WordPress and Unit Testing","description":"Performance focused Front-end Development."},"/googlea2c3a0ad5b2401f7/index.html":{"text":"google-site-verification: googlea2c3a0ad5b2401f7.html","from":["googlea2c3a0ad5b2401f7"],"headings":[]},"/html-imports-component-driven-development/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    15 Sep 2018\n  \n  \n\n  \n\n  Update: As linked in the article, HTML Imports are being removed from Chrome in favour of other alternatives. This is more of an experiment to look at how a modern take on an old way of doing things might look like in as simple a way as possible without the reliance on too many external tools.I was thinking about the process of building a site today vs maybe 8 years ago. When WordPress was called for, I'd usually build the site from start to finish within WordPress. You wouldn't see any CSS for a little while as custom post types needed creating, content needed to be sourced, and plugins needed to be installed. The whole front-end was mashed up with this configuration, and nothing was really finished until the site was live.Now, I didn't know a whole lot 8 years ago, so looking back there are ways it could have been done better. If I could go back, I'd probably build a static site first with all the parts, then port that over to WordPress when it was ready. It might be me, but I find not having to think about a CMS while doing initial front-end work very liberating. I don't want to troubleshoot why a template is breaking when I want to focus on styling. It's too easy for me to go off on a tangent and fiddle with PHP because I just thought of a better way to do something.Years later, this idea of focusing on the right things at the right time became, for me at least, encapsulated with Atomic Design, so I want to take this moment to thank Brad Frost for preserving the few remaining brain cells I have left. I used tools like Pattern Lab, and Fractal which really opened my eyes to the benefits of focusing on one thing at a time.Working on a team and incorporating these tools caused trouble at times. When I wanted to introduce this notion of building a project from components, everyone had to be on the same page, and have a solid understanding of the tools we were using. Technical bugs arose from misconfigured environments or an unmet expectation, and when you're moving fast with multiple projects, it can be a momentum-killer.In many cases, I see nothing wrong with setting up a local PHP server in a directory with php -S localhost:8080, and setting up individual files for components and using include to pull them into a template. Not all projects demand a batteries-included pattern library that can be exhibited to a client. Sometimes they don't care as long as the project gets done on time and within budget. It'd be nice sometimes to surprise a client with such a powerful resource packaged up in Pattern Lab, but when it's not called for we still get that nice component-y feeling from a smattering of PHP calls to other files. The developer still gets to focus on one thing at a time.I was wondering if there's any way we can replicate this in the browser without relying on external libraries. Maybe it's something that could be done with the tools we have today without depending too much on JavaScript to make a bunch of AJAX calls. That's when I was reminded of HTML Imports. I wonder how far along that is now...Well, at the moment it's not great. Mozilla have published their thoughts on supporting it.At Mozilla we want to explore how importing custom element definitions can align with upcoming ES6 module APIs. We’d be prepared to implement if/when they appear to enable developers to do stuff they can’t already do.Chrome will be deprecating the current implementation soon as well.Still, though, I wanted to try to replicate that process of having components and including them where I needed them, without requiring a developer to know the ins-and-outs so they can focus on coding.Given I have an index.html, a folder for partials (think a header and a footer which may be made up of components), and a folder for components, I want to load them, and inject them into the page. The first thing to do is register them in the <head> of my document with <link rel=\"import\">.The ID is important for referencing the imports in order to inject them into the page. So how do we reference those imports? I'm going to use a data attribute to define this.Inside my site header, I'm also referencing the primary nav.We need some JavaScript to get the ball rolling. We need to find the imports, grab their content, and replace instances of [data-import] with their respective content. To be fair, it's not an awful lot of code, which was a nice surprise.Get the import id to identify where to import into our document later onGrab the contents of the import. Since it'll include the body tag, we want to get everything inside that instead.Find the spots to put it in.Loop through each data-import and replace it with the contents.For step 4, I'm using content.clondNode(true) rather than passing content. I'm doing this because if there's more than one instance on the page, it'll only show the import in the last place it was referenced, essentially moving it around. By using cloneDeep, and passing true to include the children, we're copying it into every place it's being referenced.I thought this was a fun little experiment, and it would be really cool to see this factor into the tooling of creating websites in the future. That's if the support is there. Otherwise, there are custom elements to look into, or I'm happy sticking with a static-like setup with PHP.See the demoView the source← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["html-imports-component-driven-development"],"headings":["HTML Imports & Component-Driven Development","#"],"title":"HTML Imports & Component-Driven Development","description":"Playing around with HTML Imports before deprecation, pining for a native, relatively hassle-free way of building a component library."},"/image-parallax-and-blur-with-tornis/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    28 May 2019\n  \n  \n\n  \n\n  Update: Probably best to leave out the blur for larger things, as it destroys performance on Firefox. The transform still works well.I updated my site recently and wanted to put a bit more focus on images. To do that, I included a space for cover images in articles. They take up a chunk of the top of the page, and I'll probably re-think this approach at some stage. Maybe I'll overlay the title and description over the image...I wanted to include a bit of pizazz, and the image was the prime candidate. That's when I remembered Tornis, a library that lets you respond to changes in the viewport. I wanted it for the scroll position monitoring, and while I can add an event listener to window and do the same thing, I'm thinking of a few other use-cases for this library, so I figured why not give it a go.Here's a stripped down version of the code I used on my site. In reality, I'm checking for the existence of the cover image before kicking anything off. I followed the examples on the Tornis site to get here.I'm checking to see if we've scrolled past the cover image and setting a value between 0 and 1 in the scrollY custom property. With this custom property, I'm setting the filter and transform property of the custom image.I'm also using position: sticky so the image travels down the page with us.For the blur, I'm multiplying scrollY by 10 pixels. So when scrollY is 0.3 that'll evaluate to a 3px blur. The transform behaves in the same fashion so that it slowly crawls in the opposite direction of the scroll.You can probably think of more creative uses, for example, the amazing forest scrolling on the Tornis homepage.\n  See the Pen \n  Tornis Parallax and Blur Demo by T.J. Fogarty (@tjFogarty)\n  on CodePen.\n\n\n\n\n  ← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["image-parallax-and-blur-with-tornis"],"headings":["Image Parallax and Blur with Tornis"],"title":"Image Parallax and Blur with Tornis","description":"Using the Tornis library to create a parallax and blur effect on a cover image while scrolling."},"/improving-client-side-performance/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    09 Sep 2018\n  \n  \n\n  \n\n  Below are some ways I've found to optimise the performance of a site when getting it ready for a production environment, or patching an existing site. Where possible I'll list some common implementations, though understandably we don't always have the kind of access we want to make changes.These opportunities for client-side improvements are typically more common among websites rather than web apps. I think this is because of the tooling that comes with modern web app development e.g., vue-cli handles code-splitting, and generates a service worker. With build tools like webpack, or Gulp, it also means you can install a plugin to slot somewhere in the process that takes care of some of these. Others need some TLC, and a sympathetic ear.A picture paints a thousand words, but that's no good when many of those words are synonyms for \"slow\". People aren't always aware of the specifics of an image, nor should they have to be in some cases. If it's possible to upload a 5mb image, then chances are it'll happen at some point. That's just how it goes.There are some methods we can use to automate the reduction of overall bloat, and still preserve image quality. Where automation isn't always available (for things like static sites, or non-CMS based projects) there's still plenty of tools we can employ.The first port of call is to resize the image. Generally speaking, we don't need a higher-than-usual-res image for something that only takes up a portion of the page, or isn't the reason for the page existing. If photography is your gig, then you can serve a smaller image with an option to view the high-res version if they so wish.If you do a search for \"resize image\" you'll find a whole host of online solutions that will do the job for you. This is great if you're only concerned with one or two images at any given time, but what if you have a folder full of them?MacOS comes with a program called Preview which lets you batch resize images. To do this, select all your images, right click and open with Preview.From here you'll see the preview window:Pressing CMD + A, you can select all the images, then go to Tools > Adjust Size. The dialogue that appears will let you set a value for the width and height, though you might only set the width and let it scale the image for you so no part of the picture is clipped.It's been a while since I've worked on a Windows machine, so pardon my ignorance here.One solution I've seen is to send your images as a mail attachment, at which point you'll be presented with an option to resize them and preserve their aspect ratio.Another, possibly more ideal, option is some software called ImageResizer. When you select a group of images, and right click, it adds an option to resize from the context menu that appears.WordPress comes with baked-in support for resizing images. If you're using Timber for WordPress (give it go, it's class) then you can also resize images on the fly.If you're using Craft CMS, you can resize, set the quality, and change the format of an image within your control panel and templates.For ExpressionEngine, a ridiculously powerful plugin is CE Image. If you're working on a big project, then the asking price is worth it. Otherwise, there are some resize capabilities in the control panel.This approach, depending on your needs, could be a great way to manage images. If you're ok with storing your images with another service (provided you have your own copies backed up somewhere), then the free tier of Cloudinary will be quite appealing. Once you upload an image, you can manipulate the URL to make modifications such as resizing or converting to another format.If you haven't already gone the cloud or CMS route, then we still need to optimise things further.Once the images have been resized to your liking, the next step involves analysing them to identify any cruft that can be removed to reduce the file size. Some approaches include:Removing metadata that might have been attached from the camera that took the original pictureOptimising JPEGs to reduce the number of colours required to render the pictureConverting from PNG to a lossy format if transparency isn't requiredLong before software existed, we would have had to parlay with an image, and barter for pixels. We would have lengthy discussions trying to convince it that it looked just as good with 80 shades of red rather than 200. Or that JPEG suited it better than PNG. It was sparse times for all involved.Luckily, there are tools available to make this quick and simple. We're happy, and the images are happy.ImageOptim is my favourite for optimising images. You drag your images onto the program and it does the rest, replacing the existing ones by default. It lets you know how much it's saved as well. If you're not happy, you can update the preferences for more aggressive optimisation.The ImageOptim website has a page that suggests alternatives for other platforms. Again, apologies for my MacOS-centric state of mind.If your images don't need transparency, you can convert them to JPEG and reap the benefits of a smaller file size.On MacOS you can open your images in Preview, as before, then after selecting everything you can go to File > Export Selected Items. In the dialogue that appears, in the bottom left is a button labelled Options. From here you can select a different format.There's also plenty of online tools that do this. On Windows, an option might be some software like IrfanView which I believe lets you batch convert images. I don't know if I've said this yet Windows users, but I'm sorry. I haven't even apologised to Linux users yet.Making your images responsive involves more than:Sure, it resizes, but you could be wasting a lot of bandwidth here. If I need a sticky note I don't fold an A4 sheet into a small square; that would be a waste of paper.If we follow the approaches above, we can combine different sized images and serve the appropriate one to the user.To do this, we can either use the <picture> element, or the srcset attribute. With <picture> you're giving instructions to the browser to render a specific image at a given breakpoint. With srcset you're giving information to the browser, and trust it to deliver the most appropriate image in any given case. The two can be used together as well for greater control.Using <picture> is great for cases like art direction, when on a smaller screen the image might be too small to make sense of, so you want to serve a different image, or a cropped version of the original, to preserve the original meaning.An example from the Responsive Image Community Group website:The srcset attribute means you have less control over what the user ends up seeing, so it's a good idea to keep this reserved for resized images. It could be dependent on the size of their screen, or even their network capabilities.And another example from the Responsive Image Community Group website:For more information I'd recommend checking out the... Responsive Images Community Group website, as they cover usage and use cases in greater detail. Smashing Magazine also has a good overview of it.So you have your images resized and optimised with your responsive image tags in place. What else could we possibly do? Well, it's not guaranteed a user will see every image on the page, so why make them download everything? Take for example a carousel. Now, I know people have opinions, and I'm gonna stay clear of that. You do you. But how often does someone see every slide of a carousel? We could instead load the image when the new slide arrives.The same goes for scrolling, not everyone makes it to the bottom of a page for one reason or another.By far my favourite solution is LazyLoad.This works for the srcset attribute in <picture> and <img> as well.You'd be surprised how many external scripts are loaded on some websites for various tasks. Some are unavoidable, such as analytics, but others aren't strictly necessary for the functionality that they provide.This is a common one, where someone wants there to be buttons available to share a page on any social media platform they want, then and there. You don't need an external service firing JavaScript into your site to do that, though.You can make it works with HTML, and either use the supplied CSS, or use your own to blend it in with the rest of the site. For this, you can use Sharingbuttons.io, or Simple Sharing Buttons. Both offer a clean approach, while the latter also has a JavaScript version which will automatically gather the relevant page information to share. If you're using a content management system, you should get by without it by populating the sharing URLs with information on the current page.OK, this one is a bit more involved... you can include social media feeds without JavaScript, but you need to have some sort of server-side access to render them. You can roll your own using a given social media's SDK, or use a plugin. The added bonus of this is being able to style it to match your site.I don't have any recommendations on this part, as I ended up rolling my own for Craft CMS, ExpressionEngine, and WordPress for work projects. I used the PHP SDKs for Twitter and Instagram. So that can be a fun learning experience.It's more straight-forward with WordPress, as you can create a PHP file and include it in your functions.php file. For Twitter, I used the twitter-api-php package for gathering the latest tweets of an account.I'm sure there are solutions out there for your CMS of choice, however, and I'll leave it to you to find one that does the job. This isn't an easy-out, I just don't have experience with those plugins. Hopefully, it's sparked some investigation on ways you can speed up your projects.If you're not using webpack, Gulp, Parcel etc... for packaging all of your dependencies, then you may see extra requests happening in your browser. In my experience, this happens mostly with WordPress sites where plugins drop their own styles and scripts into your templates.WordPress users rejoice, you can choose from many solutions such as Autoptimize, and W3 Total Cache which brings more than just combining assets to the table.I'm not aware of up to date plugin solutions for other platforms, but I'll add them here if I come across any.If you're using npm, a quick solution might be to use the UglifyJS package. So after running npm install uglify-js, you can add a new script to your package.json:The command npm run build then would combine and minify your JavaScript. The -c, and -m flags will compress and mangle your code.Using service workers, we can intercept network requests and serve up cached assets. What we can do is, once the user has visited the site, cache things like styles, scripts, fonts etc... then any subsequent requests from that user will be served from the cache. Once we make updates, we can invalidate the service worker, and fresh assets will be downloaded again.For this site at the moment, I'm using the SW Precache webpack plugin. This lets me generate a service worker with webpack when I move things into production. I'm finding it's especially useful for fonts to avoid a flash of unstyled text.Here's the configuration from my site:This greatly improves performance, though if you make some drastic changes a user might see a broken site until they reload. Maybe there's a solution for that, but I haven't gotten that far yet in my service worker career.Google has an introduction that's worth looking at, if you want to dig deeper and understand how it fully works (like I didn't).While writing this I became aware of Progressive Tooling which looks to be a pretty fine resource for tooling around this subject.If you want to eek out more performance improvements, have a look at these:link rel=\"preload\" lets you identify priority assets to improve loading performanceCloudflare makes use of a global CDN to improve performance. It has a generous free offering as well, which makes it worth trying out.That's all I have! I'll update this with any new insights I receive, but hopefully there are a few bits here that prove useful.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["improving-client-side-performance"],"headings":["Improving Client-Side Performance","#"],"title":"Improving Client-Side Performance","description":"A few ways in which we can improve client-side performance focusing on images, third-party scripts and more."},"/lightweight-utility-object/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    25 Jul 2015\n  \n  \n\n  \n\n  I'm working on a little project, and it's fairly lightweight. I ended up creating a JavaScript object with a few functions to help with the most common tasks, e.g. add class, toggle class, select element...It's a collection assembled from You Might Not Need jQuery.Example usage:I'd usually have this exported as a separate module using Browserify or ES2015.View the Gist← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["lightweight-utility-object"],"headings":["Lightweight Utility Object"],"title":"Lightweight Utility Object","description":"Performance focused Front-end Development."},"/multi-select-checkboxes-with-react/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    20 May 2019\n  \n  \n\n  \n\n  An issue arose recently where a user wanted to be able to hold the Shift key to select a range of items in a list. A pal in work set me off on the right path, but what ended up being approved was quite different as there were multiple things to consider:Shift + Click could be in either direction - up or down - to select a range of items.Unselecting something combined with Shift + Click could unselect a range of items.This works with clicking labels as well as the checkboxes.The list could be re-ordered at any time, so we need to operate on the index of a value. So rather than storing an index, we'll store a value and get the index from that when we need it.Here's what we'll be making. Try checking off an item then hold the Shift key and click on another item further down the list.View DemoHere's the scaffold of the component we'll be making. This looks a bit chunky, but we'll go through the methods individually and fill them in.We'll start with rendering the items, as a bunch of code later on will depend on this. We'll be iterating over an array of objects that have a label and id property. The id is what we'll keep track of in state, and we'll know if it's selected be checking if it's in the selectedItems array.We'll start by setting up the initial state, and binding events to the component.First, we'll need some data to iterate over. The generateItems method is a small utility function for generating some example data. It goes like this:The next bit, isShiftDown will keep track of when the Shift key is currently being pressed. That's how we'll know when to trigger our multi-selection.selectedItems will keep track of what has been checked off. We'll use this to toggle items, and also determine if we should be bulk selecting or unselecting items.Next, if I click item 5 and then hold shift and click item 10, I need to select items 5 through 10. The lastSelectedItem will help us do that.listEl will be a reference to our list element, and finally, we'll bind our events to the component. We could use arrow functions as well, but this is how I was raised.We're listening for DOM events, pure and simple:The key up/down events will be for detecting when the Shift key is being pressed.The selectstart event is when we're clicking on text, and holding the Shift key. If we do that, it'll select the text rather than the range of items we want. By listening for this, we can decide whether we want to allow the default behaviour or block it.This is for cleanup so we don't leave any event listeners hanging around which might try update state on a component that no longer exists on the page.To be fair, this could be named a bit better to avoid confusion with other selections we'll be making, but it mirrors the DOM event we're handling:We only want to disable the text selection if the Shift key is being held down. This way a user can still highlight the items and copy them if they wish.We do a quick check if the Shift key is be pressed, or let go of, and update the state accordingly.This is a short and sweet method that will hand off the majority of the work. This will make a call to get the next value(s) for our selectedItems and update the state. We'll also store the value as the lastSelectedItem for when the next click is made with the Shift key held down.This is where things get a little more involved. Let's ignore the if (isShiftDown) block for now and skip to the final return; if the item is already selected, then we return the selectedItems without that value. Otherwise, we append it to the array.If, however, the isShiftDown is true, we'll call getNewSelectedItems to return an array of items. It's combined with the currently selected items and duplicates are removed using a Set which is spread into an array. Sets cannot contain duplicates, so if you try to add an item that already exists, it won't do anything.If the item isn't in the selectedItems array, we know then that it was previously removed. With that we remove anything that isn't a newly selected item - this inverts the selection.In this final method, we get the index of the last item we selected, and the current one. We then grab the range of those items using Math.min and Math.max to get the lower and upper index from the items array. Rather than returning the array of objects, we map over the results to return only the id.It took a while to get this right, and even then there's probably plenty of room for improvement. It was an enjoyable problem to solve. I tried doing it with regular JavaScript, and it's a whole different ball game when the state is stored in the DOM instead. My mind has been in React land for the past 2 years, so I never thought of it any other way. It'd be a good exercise to try this out in other frameworks/paradigms.View Demo and Source← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["multi-select-checkboxes-with-react"],"headings":["Multi-Select Checkboxes with React","#"],"title":"Multi-Select Checkboxes with React","description":"Listen for hotkeys to select multiple checkboxes in a few clicks."},"/my-local-environment-timeline/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    20 Mar 2018\n  \n  \n\n  \n\n  The dust has more or less settled now in terms of the tools I use to develop for the web, at least on my own personal machine. I'm rocking a mid-2012 MacBook Pro, and while it's starting to show its age it still powers through thanks to some software options available. I wouldn't say it's a compromise by any stretch, and sure it would be nice to have that extra oomphf every now and then, but it's not a limiting factor for my personal work.I've used Windows since I was a young lad, starting with Windows 98SE on a Compaq Presario. I remember playing a lot of Critical Mass on it, and the sound of firing a missle still rings pretty clear in my mind. Seriously, it's a great game. I stuck with Windows from then through college and my first developer job. During my first job I had a bit of developer envy seeing all the tools available on Mac, and the power of the terminal. A lot of StackOverflow responses referred to the terminal, and I got more of a taste for it when I installed Ubuntu on my old laptop. Some hardware didn't work correctly with it so I abandoned my attempt at switching OS after a couple of months. Eventually I saved up enough to buy a MacBook, and after a period of adjustment I was rm rf-ing with wreckless abandon. Every developer job I've had since has been almost entirely Mac-based outside of some time on Windows for cross-browser testing. That's not to say I wouldn't switch back; MacBooks are damn expensive, and when I end up having to shell out for a new machine in the future I might go that route.College was mostly Netbeans and Eclipse for Java development, and Notepad++ for HTML, CSS and JavaScript. It was in college when I started using Sublime Text and the LAMP stack using tools like XAMPP. I stuck with this setup for years, only swapping XAMPP for MAMP on the Mac. When Atom hit the scene, I immediately switched. A massive community came from seemingly nowhere creating countless plugins. This was a refreshing contrast to Sublime Text which was starting to wane in terms of updates and communication from the developer. I stuck with Atom for a couple of years, before finally returning to Sublime Text due to performance issues. I could run Atom, Chrome and MAMP concurrently, but not much else.It was during this time I switched to Laravel Valet and Sequel Pro, and it really gave my machine some breathing room by sparing some resources that were otherwise consumed by MAMP. I still had MAMP on hand for legacy projects that needed Apache and older versions of PHP, but those were slowly updated or phased out.Later on, Visual Studio Code was starting to make waves, and I was distracted once again. For the most part, it was a really great experience, especially for larger JavaScript projects, but again I was eventually hitting performance issues with a rogue process hogging all my CPU power. After a few months, I once again switched back to Sublime Text.For now, at least, it has. I feel much more confident in where I'm at compared to previous setups. In the past while, it's the code editor that was always the one being swapped in and out; I always felt like I was trialing something knowing I could come back to Sublime Text. I'm just as productive as I was (if not more so as I'm spending less time dealing with performance issues), and I don't feel like I'm missing out using Sublime Text, Laravel Valet, and Sequel Pro.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["my-local-environment-timeline"],"headings":["My Local Environment Timeline","#"],"title":"My Local Environment Timeline","description":"Performance focused Front-end Development."},"/pace-yourself/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    26 Jun 2015\n  \n  \n\n  \n\n  When I first started college I was full-sure I was learning to become a web designer. I had experience with PhotoShop from my teen years when creating signature graphics, or “sigs”, for people on forums, or designing little sites on Freewebs (mostly with Flash-based games embedded on the page. They were fabulous travesties complete with background music and animated gifs, and I’m still not sorry.)As I progressed, I found myself drawn more to the development side of things. This helped immensely as the course I was doing became more programming oriented. I moved from PhotoShop to Notepad++, and my colour palettes were more focused on syntax themes.This shift meant I was becoming one of the go-to people when someone had a question or a problem. After a couple of years of this I started to feel more responsible for these problems, like I needed to know the answers - I put the unnecessary expectation on myself to have the solutions. Instead of trying to meet my own deadlines and being honest in saying “I don’t know, but here’s some resources that might help”, I would instead drop what I was doing and make those problems my own. There’s nothing wrong with doing that the odd time, but just not every time.This got to a point where I even did someone’s final year project, and we were driving to the presentation while I typed their slides in the passengers seat. I put myself in that position when there was absolutely no need. I didn’t stop to consider if I was truly doing the right thing for myself or my friend.—After college, I was lucky enough to land a job as an intern web developer working alongside someone who was incredible at what they did. After 9 months he moved on, and I was back in a very familiar position by being the only in-house web developer. I learned so much in that time, but the trial by fire that followed coupled with my eternally-nodding head left me burnt out rather quickly. I’m not going to go into specifics about my journey, but I wouldn’t be where I am today without that experience, and I’ll forever be grateful for it.Littered throughout all this are bouts of imposter syndrome, which is wonderfully explored by David Walsh in his blog post I’m an Imposter. It’s such an honest article, and it can apply to any industry, not just the web.—You might hear about burn out, and attribute it to someone who was just worked too hard, but it’s also worth thinking about that fact that it’s not always the environment they’re put in that causes it. It certainly contributes, but there’s an onus there to know one’s limits as well. I would ignore my frazzled mind’s attempt to switch off, and if I felt happy every once in a while, well, that was just a bonus.I love coding in my spare time which means work and play can sometimes overlap. I’ve gotten far better at managing this balance, and I can switch off and go do something else without a strange sense of guilt plaguing me. I try to imagine the world literally ending, and it all seems kind of silly.—So the takeaway for me was to step back, and not rush into commitments. It was irresponsible, and unfair to all parties involved. Sure there can be pressure there for an answer straight away, but it’s absolutely OK to say “I need more time before I can quote for that” or “I don’t know how to do that, I need time to research it. Let me get back to you after lunch with what I find”.Take your time. You’ll never know all the answers.Sure how can you when in the time it took to read this about 20 new frameworks are available. Better get on that :p← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["pace-yourself"],"headings":["Pace Yourself"],"title":"Pace Yourself","description":"Performance focused Front-end Development."},"/page-visibility-api/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    23 Feb 2018\n  \n  \n\n  \n\n  The Page Visibility API lets you detect when a page is visible or in focus for a user. The page is deemed no longer visible if they switch to another tab or when the window is minimized.So what is it good for? The MDN Docs do a great job of explaining this API and its potential uses. For example, you could use it to pause a video or a game, or hold off on any background requests you might be making.My cases are far less noble and exciting. Yes, I'm using it to show an emoji in the document title. Go ahead, switch to a different tab. Do come back though. Please. The link to the MDN Docs gives an example of how to implement the API, along with affordances for older browsers that support a vendor prefixed version. I'm going to outline a barebones script for my implementation.After calling PageVisibility.init() you're good to go.[1] We're storing the original copy of the document title so we can revert back to it once the page is visible again.[2] We do a rudimentary check for modern support for this feature. You can check out the MDN link above for the vendor prefixed version.[3] Binding the lexical scope of this. It means when I call this it'll refer to the PageVisibility object I created rather than document.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["page-visibility-api"],"headings":["Page Visibility API"],"title":"Page Visibility API","description":"Performance focused Front-end Development."},"/quickly-build-a-simple-grid-with-sass/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    17 Mar 2015\n  \n  \n\n  \n\n  All you need are some variables and loops. Granted, some may argue for readability, but as long as what you're doing is well documented, it can save you a lot of time. Especially if you want to add/remove breakpoints.The end result should be a simple class list that is responsible for the width of your column. I'm using a seperate class to take care of floats and padding.For my purposes, I'm using `.layout__item` and `.g-1-12`, `.g-2-12`… etc`.layout__item` will contain the following:Starting off, I need a formula for calculating width based off a fraction of how many columns I want. Say I wanted a column to extend 4/12 of the page, I'd use:`(4 / 12) * 100%` In Sass, this would return 33.33333%. Happy days, so let's  keep that in a function.I'm then going to keep my colums in a variable.Next, I'm going to use a for loop to iterate through my number of columns, and use the percentage-width function.This yields the following:etc...So what about breakpoints? The above example would surely serve well as a mobile-first starting point.Let's throw in another variable, a map:We can use the above loop again, but modify it slightly to include medium and large in the class name.It's the same loop, but repeated for every breakpoint defined in $grid-breakpoints, resulting in:And so on.You can grab the source and see a small example below.See the Pen Simple grid with Sass by T.J. Fogarty (@tjFogarty) on CodePen.\n\n\n\n  ← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["quickly-build-a-simple-grid-with-sass"],"headings":["Quickly build a simple grid with Sass"],"title":"Quickly build a simple grid with Sass","description":"Performance focused Front-end Development."},"/resourceful-learning/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    10 Apr 2016\n  \n  \n\n  \n\n  You're speeding down the information highway during a blizzard. Data is pelting off your windscreen with reckless abandon. You stick your head out of the driver-side window to grab a glimpse of where you're going, but you're instantly blinded. There's shards of data sticking out of your face while you fumble for an empty bottle to pee in since you can't stop for fear of falling behind. It's not pretty. It's also a tad exaggerated.What I'm trying to say is sometimes it's tough keeping up with what's going on. I'm making an effort to slow down, and learn at a comfortable pace. I try to imagine the world literally ending because I haven't written a todo app with React, and it helps put things into perspective.While there's a lot of resources here, they're more of a starting point to focus on something that you find interesting. Here's some resources that help me:I do love podcasts. They're manageable bits and bytes of information that you can soak in at your own pace. Some of my favourites are:ShopTalkThe Laravel PodcastToolsdayUnfinished BusinessWhile podcasts are great for conversations surrounding interesting topics, you can't beat watching and working with live code. That's where screencasts shine, and when done right can spark some motivation.LaracastsCSS-Tricks - The LodgeServers for HackersReact for BeginnersTodd Motto's online coursesI'm finding myself signing up for more newsletters these days as they tend to reveal some really great articles that I would otherwise miss.CSS-Tricks I clearly have a bit of a grá for CSS-Tricks, and was fortunate enough to have an article published there.Pony FooSoftware Lead WeeklyResponsive Design NewsletterThe UI Animation NewsletterCSS WeeklyThe nice thing about having access to all these resources is you can pick and choose what you find interesting. There's no way you can read every article while listening to every podcast and watching every screencast. If you can, then fair play and power to you.Massive thanks to all those who dedicate their time to provide these resources as well. It's an incredible thing to be able to provide this knowledge.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["resourceful-learning"],"headings":["Resourceful Learning","#"],"title":"Resourceful Learning","description":"Performance focused Front-end Development."},"/responsibilities-of-a-web-person/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    19 Jul 2015\n  \n  \n\n  \n\n  This post is about what I think it means to be a web person. I’m using ‘person’ here because that’s what you get when you strip away all the titles. We’re people first.Working with computers is a large part of our daily lives, so it’s easy to get lost in those titles. Job postings start looking like “we’re looking for this thing that has these features”.It’s all person-to-person. I’m just trying to pare it back and look at the commonalities in what we’re all doing here.We all got into the web for different reasons, and it doesn’t matter what they are. What matters are the responsibilities we then inherit, whether we acknowledge them or not.These are the most obvious responsibilities. We want to be happy, so we do the things we like. If we’re not happy we try to alter our patterns or exert some kind of control over our situation.Skills atrophy on the web. Everyday we wake up to something new and exciting so we need to learn a little bit about it. We need to keep iterating on our processes, or consider throwing them out completely. It can be a gruelling pace, but when something clicks, it’s an incredible experience. You share it, and others might get excited. It’s an inspiring chain-reaction.These ones are a bit more nuanced. Our work is out there in the open, subject to every kind of user imaginable. This can be both exciting and terrifying.Users expect things to work a certain way. These expectations are shaped by previous experiences. These exist in many forms in the myriad of devices available. You should know, you’re a user! You have every right to expect a pleasant, usable experience.So, we’re a happy bunch of users. Why? We’re happy because we usually have the latest browsers or smartphones.We can also be unhappy users when something doesn’t work the way expect. We might know how it was implemented, so we become more focused on the accessibility/usability/technical implementation of it.What if the user doesn’t work on the web like some of us? How might our responsibilities to ourselves clash with our duty to serve the people?We know already how quickly the web evolves. We might feel pressure to use the latest tools to keep up. This pressure can blind-side us to the people we’re excluding. Are we using this tool because it genuinely helps us help others? Or is it because it’s fun and we’re all talking about it?It’s not about shaming. It’s about thinking of the choices we make that make us feel good. Those choices may not feel good for a user who doesn’t have the same setup as us. We don’t consciously exclude people, and it can be impossible to avoid. We just need to think before we bower install sometimes.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["responsibilities-of-a-web-person"],"headings":["Responsibilities of a Web Person","#"],"title":"Responsibilities of a Web Person","description":"Performance focused Front-end Development."},"/scrollable-container-controls-with-react/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    03 May 2019\n  \n  \n\n  \n\n  I recently had to solve an issue: A container has a list of items which can be scrolled horizontally. However, it is not obvious you can scroll if a scrollbar isn't visible. This is the case sometimes depending on OS and user preferences.The agreed solution was to add some buttons to let the user know there's more content available. Clicking these buttons would scroll either backwards or forwards. Seems straight-forward enough, though there were some things to consider:We need to know if there is overflow on a given container.A button should be disabled if there isn't any more content to scroll left or right to.We should re-evaluate if there's overflow and if we can scroll whenever a new item is added or removed.For the purposes of showing how I ended up with a solution, I won't be doing the following:Writing optimised code - I don't want to go off on a tangent and refactor with hooks, or HoCs. This demo exists in a world where it'll only be used in one place, ever.Nice styles.Also, a chunk of this isn't really React-specific. You could take the DOM parts out and drop them into any other setup that you'd like. My use-case just happened to require('react').View Demo & SourceIf you don't want to go through the initial setup on your own machine you can use CodeSandbox and select the React preset.I'm going to work off of a fresh install of Create React App by typing the following into my terminal:If you're unfamiliar with npx, you can read the announcement. It'll do a bunch of interesting things, but for our use case it'll let us use CRA without installing it globally first.Once that's done, I'll cd into my new project directory and run npm start, or yarn start which will give us a development server on localhost:3000 by default. Next, I'll clear out bits of src/App.js that I don't need so I'm left with this:I'm then going to delete src/App.css and update src/index.css for some initial styles.I'm setting the body to display: flex because I plan on having only one node in there, so this is more of a convenience to centre it in the page.In the last part of the setup, we'll create the component where all the interesting stuff is going to happen. I'm going to call it ScrollableContainer in a new components folder in the src directory. I'll also add some styles.That's a fair sized chunk of code. We've started installing lodash.debounce with npm install lodash.debounce in order to ease up on the DOM events we'll be hooking into, which are bound in the constructor.The rest of the code displays the items and is responsible for adding, and removing items. We also capture a reference to the container, which we will call via this.container.Next up, we'll start filling in the stubs.To check for an overflow, we'll need to check the width of the container vs its scroll width. We can do that, and set the result as follows in the checkForOverflow method:Nothing will happen until we call that method, and there's a couple of ways we'll do it.First up we'll add a componentDidMount method, and we can do the following:However, you'll only see the state change hasOverflow if the initial count of items warrants an overflow. If you change items: [...Array(7).keys()] to items: [...Array(15).keys()] then you should see the state change in React Dev Tools when the component mounts.If we leave it back at 7 though, we'll need to consider when someone adds or removes an item. This is where the componentDidUpdate lifecycle method comes in. We can check if the length of the previous items array is different from the current one.Try adding and removing items now, and you'll see hasOverflow changing.\n\nThere are some things you can do with this, such as showing and hiding the controls if you so wish, or use it to change the styles.You can see in the state we have canScrollLeft and canScrollRight. We'll use these to enable and disable the controls.So for starters let's update the buttons disabled property to use these:Based on the initial state, both of these should be disabled, so let's figure out when they should be clickable.If the scrollLeft is greater than 0, then we know the container has been scrolled a bit. It represents the number of pixels scrolled from the left.To check if we can scroll right, we need to look at the scrollWidth of the container, which will be the entire length of the container if the overflow wasn't hidden, and the clientWidth which is the width we can physically see.Say the scrollWidth is 600, and the clientWidth is 500. If we subtract those, we get 100 which is the maximum value scrollLeft can be. As long as scrollLeft isn't 100, we know there's still more to scroll.In order to get this method called, we'll need to add some more code into componentDidMount to listen for scroll events on the container, to ensure we have access to the container ref. We'll also add an initial call to this.checkForScrollPosition() in case we have a large number of items on mount that need to be scrollable.Finally, we'll need to update componentDidUpdate to check again. This covers an issue where you've scrolled to the end of the container, and clicked Add Item. You'll see the next button is still disabled even though there's new space to scroll.Adding some more items, and scrolling the container, you'll see the buttons toggle between enabled and disabled.The last step is to make those next and previous buttons actually do something. To start, we'll create the method that will scroll the container:This will accept a number which will scroll the container, and it'll be a smooth scroll as well to make it look profesh. If we pass 200 into there, it'll scroll to the right 200px, and we can then pass -200 to go the opposite way. That leaves our buttons like this:Finally then to wrap it all up, we need to remove our event listeners in componentWillUnmount. We'll need to call cancel on the debounced method in case it fires after unmounting, and it tries updating state on a component that doesn't exist anymore.View Demo & Source← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["scrollable-container-controls-with-react"],"headings":["Scrollable Container Controls with React","#"],"title":"Scrollable Container Controls with React","description":"Managing a scrollable container with React by adding button controls, and seeing when they should be enabled or disabled."},"/self-host-google-fonts/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    09 Jun 2019\n  \n  \n\n  \n\n  A tool I use a lot is Google Webfonts Helper. I download the fonts and host them myself, which I kinda like cause I have more control over the files. Part of my webpack setup involves creating a service worker, so it's minimal effort to add them in there.I was doing this before Google allowed you to use font-display, so there was that advantage for a while.I can use rel=\"preload\" as well to help speed things up:10/10 from me. You can see the source and contribute on GitHub.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["self-host-google-fonts"],"headings":["Self-Host Google Fonts"],"title":"Self-Host Google Fonts","description":"Self-hosting Google Fonts gives you more control over performance and loading of your fonts."},"/tags/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n\n  \n    \n    external-links\n  \n    \n    javascript\n  \n    \n    css\n  \n    \n    cms\n  \n    \n    php\n  \n    \n    craft\n  \n    \n    webpack\n  \n    \n    twig\n  \n    \n    inspiration\n  \n    \n    vue\n  \n    \n    analytics\n  \n    \n    experiment\n  \n    \n    wordpress\n  \n    \n    react\n  \n    \n    performance\n  \n    \n    guide\n  \n    \n    video\n  \n    \n    design\n  \n    \n    life\n  \n\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags"],"headings":["Tags"],"title":"TJ Fogarty","description":"Performance focused Front-end Development."},"/task-management/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    22 May 2019\n  \n  \n\n  \n\n  Ask 10 people how they approach task management, and you might get 10 different answers. Not so much philosophically, but rather physically: how do you store or keep track of them?Over the years I thought that software would solve my problems with the sheer convenience of it all:I can sync tasks between my phone and laptopLess context-switching when I'm workingQuick to tap/type out new tasksCategorisation of tasksRemindersNot trying to be dramatic or anything, but many of these advantages became problems when I applied it to my work.When I was starting out as a developer, I was hungry to learn and prove myself as a capable worker. Not bad things at all. But, when the day is done, it's hard to switch off when anytime you pick up your phone you can see tasks waiting for you. I was thinking about the tasks waiting for me tomorrow, and going over what I worked on that day.This went on for a few years, and it got exhausting. It's my own doing; no-one asked me to bring my work home with me (usually), and sometimes it's necessary. As time went on I started working smarter and setting realistic expectations. This gave me some breathing room to think about task management, and I decided to switch up my approach.For my personal life, I still use software. I moved between Wunderlist and Todoist before settling on TickTick. They all do much the same thing. This works great for the features listed above, mostly for portability and access on the go. I keep track of shopping lists, article ideas, housework etc...For work, I use a physical journal. I use it to break the \"conveniences\" - everything stays in the journal, nothing leaks out. It's like a quarantine of sorts. I appreciate that it makes me stop and think about what I'm doing, and I enjoy writing as well. Keeping up legible cursive writing is something I enjoy, especially when I write out a nice \"f\" - that can make my day.It also gives me a routine. I start every day away from the computer going over what waits for me. Once I check my emails and talk to people I'll append new tasks to the list. At the end of the day, I'll do up my tasks for tomorrow and carry over anything that didn't get done. Closing the journal signals to my brain that work is done.I have a few journals filled up now, and it's fun every now and then to look over them and see what I was up to this day 3 years ago. I can laugh at some notes I've written, or wince in pain at the tasks of a nightmare project. It reminds me how far I've come.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["task-management"],"headings":["Task Management"],"title":"Task Management","description":"How I handle task management - a combination of software with pen and paper depending on the context.","image":"https://res.cloudinary.com/dab4jaczr/image/upload/w_1200,f_auto,q_auto/v1536498344/my-journal.jpg"},"/text-selection-particle-effects/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    22 Mar 2020\n  \n  \n\n  \n\n  After reading Playing With Particles Using the Web Animations API I wondered if it would be possible to create particle effects based on the user selecting text.You could whip up something quick by listening for a mousedown event and adding the particles based on the mouse position. It looks cool, but I wasn't too happy because it doesn't look as neat, and it doesn't work if you're doing selection with the keyboard.There are two events we need to make this work:selectstartselectionchangeselectstart is needed to reset our initial top position. We use this to check if we're moving up or down in our selection. Once a selection is finished, and we start again, and the value can be reset.selectionchange is fired any time our selection changes, and we'll use this to generate our coordinates for our particles. This is where most of the work is done.Here's how it goes:We start selecting some text, and selectstart is fired, where we reset our initial top value to nullselectionchange is then fired where get the current selection using window.getSelection()With this, we get the range of text using selection.getRangeAt(0), followed by the bounds using range.getClientRects()The bounds now contain a DOMRectList with our selections, and we're only interested in the first and last item in this listIf our initial top value isn't set (as it's been reset by selectstart) then we assign it to the top value of the first DOMRect item in the listWe check if the left value has changed in the most recent DOMRect item in the listWe check if we're moving up or down the page with our selectionIf we're moving down, we use the most recent DOMRect in the list, otherwise, we use the firstIf we're moving left, our x position will be the left value, otherwise, we'll use rightOur y value will be the y value of our chosen bounds, plus the height of the selection so the particles appear below the textThanks to Louis Hoebregts for a great article. I had a bunch of fun and confusion getting this to work, but it was a welcome distraction.\n  See the Pen \n  Particle Effects on Text Selection by T.J. Fogarty (@tjFogarty)\n  on CodePen.\n\n\n\n\n  ← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["text-selection-particle-effects"],"headings":["Text Selection Particle Effects"],"title":"Text Selection Particle Effects","description":"Creating particle effects based on text selection using the Web Animations API.","image":"https://res.cloudinary.com/dab4jaczr/image/upload/w_1200,f_auto,q_auto/v1536498344/text-selection-particles.jpg"},"/the-clip-path-of-least-resistance/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    25 Aug 2015\n  \n  \n\n  \n\n  We may be familiar with the formable border property, which has been used for many a year for generating arrows to add a little bit of pizazz to our pages.I only recently got a chance to play with the clip-path property to take these flourishes to a new, scalable level.See the Pen Clip Path Demo by T.J. Fogarty (@tjFogarty) on CodePen.\n\nOf course, ambitions for technology like this can scale far beyond the example above, as seen by this fantastic resource called Clippy.This is only a brief example of what's possible, and I'm looking forward to exploring this more on upcoming projects. Check out Clipping and Masking in CSS for far more exciting examples.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["the-clip-path-of-least-resistance"],"headings":["The (Clip) Path of Least Resistance"],"title":"The (Clip) Path of Least Resistance","description":"Performance focused Front-end Development."},"/the-weary-wordpress-dev/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    08 Mar 2018\n  \n  \n\n  \n\n  This isn't a post 'defending WordPress', or saying you should give it a shot. It's more about the general responses and attitudes I've experienced as someone who's put a decent amount of time into using the software, and building sites and apps with it. I totally get that some people don't like it, and that's something I understand and appreciate. You can download the ZIP file, put it on a thumb drive and kick it into moving traffic. It's dangerous, but I see what you mean.The weariness stems from defending the decision to use WordPress, rather than the software itself. Why is this something I should justify to others when it's getting the job done? For me, in most cases, it wasn't even a choice. I don't mean this in a bad way; it can be less about wanting to use the latest and greatest, and more about paying the bills . The client can ask for it because it's free and so reduces overall costs. Or maybe it's something they're familiar with already, thus saving more costs on training and support and gives them confidence in the end-result. You're solving problems for someone else in this case, and so not always scratching your own itch. If you're so inclined you can satisfy this on the front-end where JavaScript and CSS offer up a whole heap of new and fancy ways to experiment.I haven't touched a WordPress project in months after my move away from agency work, and I'm not particularly happy or sad about it. It's something I have in my toolkit should I need it again (you'd be surprised how many situations arise where you can become 'The WordPress Gal/Guy'), but beyond that life moves on and I'm sure I'll work with it again in the future.Let's step back for a moment, though. Imagine you've entered the world of web development, and you've taken static sites as far as they can go. You figure that you need a content management system. Maybe you'd do a search for 'Best CMS for beginners', and dig through the articles and lists. The vast majority of these are going to be PHP-based, because most servers come with this as standard; especially cheaper shared hosting packages (I'm mentioning cost a lot because it's important). You also have the likes of XAMPP and MAMP that give you everything you need to start working with this stuff on your own machine.  PHP isn't the most difficult language to get started in either; you can rename a file extension from .html to .php and now suddenly you can do things like dynamically set the year in the footer with <?php echo date('Y'); ?> which for a beginner is a pretty nice feature to implement. With that it makes sense that the most popular open-source CMS solutions are built with PHP, and guess which CMS you're going to see suggested most often. WordPress! Ok, let's roll with that. Next you'll see the countless free plugins and themes available. If you can think of it, there's a plugin for it. You can argue that the quality of code for themes and plugins may not always be the best, but do you care at that stage when with a few clicks you have a CMS up and running with a good looking theme and powerful functionality, for free? That's pretty incredible for someone just starting out.I felt empowered the first time I built a WordPress site (it's still alive), because I was only some young fella who didn't have the first clue about content management systems or PHP, and I was able to build something that could be maintained and updated by the client. I wasn't interested in finding out what I should or shouldn't be using, or what the internet thought, because this was more than enough at the time. Work was demanding, and this solved many problems. If I couldn't crack it myself, there was a massive, and helpful, community at hand to steer me in the right direction.With the countless themes, plugins and ways of doing things, it's hard to nail down a consistent structure or guide in terms of best practice. A relative low barrier to entry coupled with popularity is a double-edged sword. Problems I've encountered are mostly due to projects I've inherited where the code is spaghetti and things seem to work by coincidence. I'm sure on my earlier projects I've left the same mess for future developers to handle, but you live and you learn. For example my initial impressions of Joomla! were mangled because of a build that no-one could make sense of to the point where the client wanted a WordPress blog alongside the Joomla! installation. It doesn't mean that's my opinion forever. If you use it, happy days, I'm sure you're out there solving problems with it. The bad experience I had doesn't make you wrong.That's not to say WordPress is only for beginners or people trying to make a quick buck, absolutely not. I'm by no means a WordPress pro, but I've worked on a few large and complicated web apps with a WordPress back-end and it does the job just as well as anything else, especially from a client perspective where they can manage content themselves. I've been saved a few times from shifting sands with a one-click install for a plugin that instantly solved emerging problems for a client.As you progress you start figuring out what you want from a CMS. This is where some people part ways. Maybe it doesn't fit your requirements any more, and you have more of a say in the tech being used. Perhaps the client wants more control and they starting installing a bunch of stuff that breaks the site, and you're tired of spending hours debugging. It's more about strategy in the last case, but that comes with time. Whatever way it goes, the browser still renders HTML and so we all converge on the same output. It doesn't matter what stack you're using.It's tough seeing a WordPress related article with comments like 'Craft does this better', or 'Drupal has had this for ages' when the person is trying to share something cool they've found or created. It may not be the approach you'd take, and that's fine; maybe it's not for you. For the other thousands of developers using WordPress, however, it can be chance to learn and branch out into other aspects of development they were unsure of. When I was working with WordPress I was aware of the negative opinions surrounding it. I decided to keep using it because I could build cool things with it. It didn't mean I was oblivious to other choices out there, it just meant I was comfortable and confident enough in my abilities as a developer to get the job done.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["the-weary-wordpress-dev"],"headings":["The Weary WordPress Dev"],"title":"The Weary WordPress Dev","description":"Performance focused Front-end Development."},"/theming-with-css-custom-properties/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    02 Mar 2018\n  \n  \n\n  \n\n  I remember scoffing at the thoughts of variables in CSS. \"Haha. Oh internet, we have Sass!\" Alas, I was a fool. Now it's getting to the stage where I might say \"Haha. Oh internet, we have CSS!\" when faced with the option of using a pre-processor. There's still a few things I use pre-processors or post-processors for such as nesting and splitting files, but beyond that I'd be just as happy using vanilla CSS.I'm going to be showing the code used on this site at the moment, one difference being the name of some of the custom properties, but beyond that it's the same. As I'm using Craft, I'll be explaining this with the Twig templating language. If you use WordPress you can do this with PHP or Twig (which I wrote an article about if you're interested), but the idea can be applied anywhere from server-side rendering to JavaScript in the client.To create a custom property, we can use the :root selector and pass it properties that begin with --. This tells the browser that they're custom properties and the values can be whatever we want. In this case we're using colours.We're going to delcare two colours; primary and secondary. The c prefix here is more of a visual cue to let us know these are colours should we need reminding:I like to keep these at the top of a file where I make base styles such as on the body tag, but I might end up moving them to their own file in the future if it gets a bit unwieldly. In any case they're set now and we can use them by calling the var() function and passing one of these property names:By using these, the project becomes instantly themeable. I'm sure more consideration needs to be taken with bigger projects; maybe you don't want all of them to change, or have more control over what gets updated. In this case you can create new custom properties based on existing ones:This way we can re-use existing values without duplication, but also target specific ones in certain cases if we need to.In my case, I'm selecting a random theme on every page load, so it makes more sense for me to have everything related to the theming in Twig files. Otherwise if I scoped my themes in CSS to a class I'd have to update the Twig file and the CSS when a new one gets added or removed. If you're making a theme selector then it can be neccessary if they change based on a class getting added to an element in the DOM. To each their own really, we just want to build cool stuff.In our default Twig layout file, I've updated the opening html tag to this:This will inline some CSS to override the original variables. So what's in _style-switcher.twig?It's an array of objects, each one containing a primary and secondary key. {% set theme = random(themes) %} will select a random item from the array which we can then use to set the value of the variable. In this approach it won't set a unique one every single time, such is the nature of random I guess. So you could refresh the page a few times before a new one is chosen.One approach to avoid this might be to set a cookie with the name of the chosen theme. On the next page load you could check if the new randomly chosen one is the same as the one in the cookie. If so, try again, and repeat until you have a new one, and set that in the cookie.If you're using JavaScript, you can use the following to update custom properties:There's a range of ways you can approach this, and the easiest in some cases might be to do this with JavaScript if you don't have access to the server code side of things. Custom Properties absolutely opens up a world of dynamicism on the web, and you can do a whole lot more than theme with them. I usually pick a new feature such as this and try apply it to my own work, be it existing or new, to have a play with it. And what's code if it's not playful at times?← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["theming-with-css-custom-properties"],"headings":["Theming with CSS Custom Properties","#"],"title":"Theming with CSS Custom Properties","description":"Performance focused Front-end Development."},"/timber-and-twig-reignited-my-love-for-wordpress/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    23 Aug 2015\n  \n  \n\n  \n\n  In what can only be described as a milestone in my life, I had an article published on CSS-Tricks. It was a great experience working with Chris Coyier to get this article put together and put out there.Read the article: Timber and Twig Reignited My Love for WordPress.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["timber-and-twig-reignited-my-love-for-wordpress"],"headings":["Timber and Twig Reignited My Love for WordPress"],"title":"Timber and Twig Reignited My Love for WordPress","description":"Performance focused Front-end Development."},"/up-and-atom/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    12 Sep 2015\n  \n  \n\n  \n\n  The past year or so has been a flurry of text-editor switching. Sublime, now Atom, and Sublime again, wait now I'm using PHPStorm, back to Sublime...It's a wonder how I get any work done, but I'm finally settling down with Atom, so I thought I'd list out some of the packages I'm using. I won't list themes, because those changes are far more frenetic.It's worth noting that Sublime Text also has equivalent packages.Spend less time managing file transfers and more time coding. FTP and SFTP support for Atom.io to send and receive files directly in your server.The usefulness speaks for itself when working on a dev server where you just need to rapidly fire files up online.Adds file specific icons to atom for improved visual grepping. Works with Tree View and Fuzzy Finder and Tabs.I'm used to the command line, or using Tower. For more common actions, this package does wonderfully.vim-fugitive like package for atom. make commits and other git things without the terminalJust some straight-up linting goodness.Does exactly what it says on the tin.I've grown so used to seeing this in Sublime that the editor feels empty without it.This is only a recent addition for me, but I've grown quite fond already.Pure beauty. Displays colours in your project files. Install and check out your colour variables and gaze for hours.Synchronize settings, keymaps, user styles, init script, snippets and installed packages across Atom instances.Gary pointed this out to me, and it became essential immediately.Keep your opened tabs below a maximum limit, closing the oldest one first.I can get overwhelmed by many tabs, to the point where they're no longer useful. This greatly improves that.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["up-and-atom"],"headings":["Up and Atom","#"],"title":"Up and Atom","description":"Performance focused Front-end Development."},"/tip-for-react-proptypes-with-storybook/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    19 Jul 2017\n  \n  \n\n  \n\n  I've recently begun working with React.js, and I'm really enjoying it! There's so much to learn, but there's one tip I've picked up that's saving me some time.I was doing some research and I came across this brilliant article called CSS Architecture with ReactJS. In it was a clever way of defining our props once, and re-using across prop types and stories in Storybook.We're going to be using Object.values. From MDN:The Object.values() method returns an array of a given object's own enumerable property values, in the same order as that provided by a for…in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).Let's say we have a <Button /> component that we can apply different themes to. We can set it up like so in our src/components/button/index.js file:Then, we can define our prop types:Finally then, in stories/button.js we can pull this in and reference it:So we only have to define the different themes once, and it'll propogate across our prop types and 'knobs' in Storybook automatically! Magic.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tip-for-react-proptypes-with-storybook"],"headings":["Tip for React PropTypes with Storybook"],"title":"Tip for React PropTypes with Storybook","description":"Performance focused Front-end Development."},"/upgrading-to-webpack-4/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    12 May 2018\n  \n  \n\n  \n\n  It's no big secret that I love Laravel Mix. It's handy enough to throw into most projects, and I had been using it with WordPress sites for a long while as it made onboarding new devs a lot easier. Babel and Sass? Done.It abstracts away all the webpack wizardry so you can spend less time setting up. It's an amazing tool and I have no problem recommending it to people. You can inject your own configuration if you need to extend it as well so you're not locked out of anything.On the flipside I'm a divil for tinkering, so a one-liner is not conducive to my mischief. After seeing the victories achieved by the webpack team on version 4 I was eager to explore it, plus Laravel Mix is on webpack 3 (soon to be version 4 by the looks of it).Here's the list of things I needed to do:Transpile my JSHandle styles written in LessUse PostCSS for TailwindOutput styles to a separate fileGenerate a service workerMinify assets for productionThe start of my config loads the packages I need, and I capture the mode we're in (development or production). I'll then use this mode later to update the config with any production-specific actions. For context, webpack.config.js sits at the root of my project, with source files and final assets living in a web folder.This part took a bit of tweaking to get my paths right for code splitting and correctly loading chunks from the correct url, but in the end I settled on:I needed to set the publicPath to / so the chunks would load correctly, but beyond that there's enough there to handle everything else.Styles took a bit of playing around with, turns out I'm a fool and didn't read the instructions on where to place the less-loader plugin. I got there in the end though, so the updated config looks like this:I updated the entry object for my styles, and added rules for dealing with less files. Finally I added the MiniCssExtractPlugin to point the output into my assets folder.To get Tailwind working I added a postcss.config.js file to my project containing:The tailwind.js reference being my configuration file.Another thing I wanted to do was clear out the assets folder on each run in case I added some extra files, like unnamed chunks so I didn't have a folder full of 1..n.js files.For that I appended the following to the plugins array:I only wanted to minify in production, so with that I added a condition to append to the webpack if it wasn't in development mode:I'll be honest, this is something that I still need to work on if I want to go full on PWA. I'm using Workbox to help with this.So still inside the if (!isDev) block I added:This compiles the service worker from this file:This caches images, JavaScript, and CSS. I really need to read up more on it.In the end, running npm run dev went from taking 6 seconds to 2.5 seconds, and npm run production dropped from 14 seconds to 4. Absolutely fantastic gains there, and a testament to the fine work those smart folks do working on webpack. This was more of a learning experience to get closer to the metal as it were, and I'll continue tweaking and breaking things because it's my site. Better I do it here than at work. I'll only have myself to answer to, and I'm my own harshest critic.You find the final file in my repo for this site.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["upgrading-to-webpack-4"],"headings":["Upgrading to webpack 4","#"],"title":"Upgrading to webpack 4","description":"Moving from Laravel Mix to webpack 4, and the performance benefits."},"/vapid-cms/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    28 Sep 2018\n  \n  \n\n  \n\n  I recently gave Vapid a quick run-through, and it does what it says on the tin:Vapid is an intentionally simple content management system built on the idea that you can create a custom dashboard without ever leaving the HTML.It parses your templates, and builds a dashboard based on the variables and sections you reference. It's sort of the opposite way we do things at the moment where you define your template variables first (think Advanced Custom Fields for WordPress), then reference those in your templates.You can host it yourself (nice), or avail of their hosting when it becomes available. It'll be interesting to see the pricing structure for it, but I do think this is something agencies will latch on to thanks to the speed at which you can develop a site with it.Check out Vapid← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["vapid-cms"],"headings":["Vapid CMS"],"title":"Vapid CMS","description":"Vapid is a content management system that has a very smart way of letting you focus on the code, while constructing a dashboard based on your templates."},"/use-applescript-to-automate-with-iterm/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    19 Feb 2018\n  \n  \n\n  \n\n  Sometimes when you're working on a project, be it work or personal, you might only be running a command in the terminal like npm run dev. Other times it might be a bit more involved. Maybe you have a local server running in one tab with another tab to run webpack and finally another one open for you to tap in your git commits.This gives us an opportunity for automation if you find yourself doing this often. Let's imagine the above scenario where we want to run a server, webpack and keep a tab free for other once-off commands that we might want to run like git.To get started, we'll need to open Script Editor from Applications > Utilities > Script Editor. We'll use this blank canvas to line up some instructions. Note: this assumes iTerm is already running.With this we grab the currently running instance of iTerm and focus in on the current window that's running.Next we'll create a new tab and run some commands. This will set a variable for the tab that we can interact with and run with the default profile. If you have other profiles set up with iTerm you can specify it here instead.What's nice as well is we can tell iTerm to split into panes so we don't get overrun with tabs.You could also use this to launch it with your code editor of choice, so if you're rocking Visual Studio Code you could update the last block to be:Once you're ready to go, you can click the play button in the toolbar of Script Editor to kick everything off. When you're happy with the result you can save the script and the next time you launch Script Editor you'll be able to choose it and run it again.I've found this fairly useful for work where there might be multiple apps and services that need to be run in parallel.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["use-applescript-to-automate-with-iterm"],"headings":["Use AppleScript to Automate with iTerm"],"title":"Use AppleScript to Automate with iTerm","description":"Performance focused Front-end Development."},"/variable-fonts/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    02 Feb 2018\n  \n  \n\n  \n\n  I read a great article about variable fonts the other day, and saw that it’s possible to use animations.Specifically, I wanted to look at scaling the weight since it can be much more granular with variable fonts.Now, I’m no craftsman when it comes to animations and fancy front-end delights, but I thought it was pretty cool. Lots of opportunities here for bringing articles to life with a bit more art-direction.See the Pen Variable Font by T.J. Fogarty (@tjFogarty) on CodePen.\n\n\n  ← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["variable-fonts"],"headings":["Variable Fonts"],"title":"Variable Fonts","description":"Performance focused Front-end Development."},"/vue.js-and-spotify-experiment/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    14 Feb 2016\n  \n  \n\n  \n\n  Note: This no longers works after Spotify updated their API, I do apologise.This is a small experiment for me to try and put together what I’ve learned when working with Vue.js.I could be doing this all wrong with Vue, but I had fun doing it. Onwards and upwards!See the Pen Spotify + Vue.js Experiment by T.J. Fogarty (@tjFogarty) on CodePen.\n\nI’m useless when it comes to design, so I took ideas from Music Player Transition. Code for interacting with Spotify from here.Check out the repo here.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["vue.js-and-spotify-experiment"],"headings":["Vue.js and Spotify Experiment"],"title":"Vue.js and Spotify Experiment","description":"Performance focused Front-end Development."},"/wait-what-am-i-meant-to-be-doing-again/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    08 Feb 2015\n  \n  \n\n  \n\n  I’m not primarily a JavaScript Developer - I’m more used to Front-end Development and the tooling scene that has grown with it. Coupled with that I’ve been building websites using WordPress and, for the past 7 months, ExpressionEngine.Skills on the web atrophy quite quickly, so I’ve been spending some spare time touching up on what I think will be relevant in the years to come. It’s a requirement of the trade, really, otherwise you run the risk of using the modern-day equivalent of table-based layouts.This can be frustrating as you have to be willing to throw out what you spent all those months, or even years, learning, but it’s also a fantastic opportunity.—I’ve been shying away from JavaScript because it’s a mental block for me. Here’s my process:“Angular looks really cool, I’ll have a play around with it.”bower install that shit.Mess with some boilerplate to build a controller.Marvel at the wonder of data-binding.I’m a rockstar, this is easy.What’s a service?What’s a factory?When should I use one or the other? Or at all?I’m out.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["wait-what-am-i-meant-to-be-doing-again"],"headings":["Wait, what am I meant to be doing again?"],"title":"Wait, what am I meant to be doing again?","description":"Performance focused Front-end Development."},"/web-cloaks/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    19 May 2019\n  \n  \n\n  \n\n  Over the years I've noticed a few things that have been used to cover over issues with a website. I've done a few of these myself due to design requests, time restraints, client feedback/requests, and just not knowing any better. I'm not saying anyone who does these doesn't know what they're doing - we can't always know the reasons, so it's better to assume good intent.In the days of Flash, you'd have a pretty sweet loading screen. These days loading screens are usually reserved for games or large interactive experiences that require all assets to be loaded in order to give the right experience.When I see this for websites it sets off some alarm bells. It might be based on waiting for images or fonts to load. I've seen other times where it's determined by a setTimeout that hopes everything will be ready by the time it fires the callback. It might solve the issue of layout jumping around as images load in, or preventing invisible text and changing fonts.I remember doing this with Typekit. I could hook into wf-loading and wait for wf-active or wf-inactive to reveal everything. It needlessly blocked content from being viewed, and if you wanted it to be seamless on load, you'd have to hide everything by default and depend on JavaScript. Then you'd need to make sure it worked without JS as well. I still see sites today that do this, and when you disable JS all you get is a white page. It's frustrating because you know all the content and images have loaded behind this curtain.Usually we can show a website straight away. The text content is usually immediately available, so why not hand it over? Instead we make the user wait for something they might not care about.Thankfully these days we can start to take advantage of font display and even native lazy loading.There's something I've noticed that has carried over from the Internet Explorer support days. The background-size rule has useful properties like cover and contain. It lets us set a background image and be confident that it will cover the entire container, or fit itself to avoid cropping at any size.While this is incredibly useful, it's not so great for it to be used instead of a regular image tag. For one, if you want to make the image as responsive as possible you're limited to media queries to swap them out. This isn't great when tied into a CMS. Secondly, you're essentially rendering an empty div with no context for screen readers in case the image pertains to the content.These days we can use the object-fit property. With this we can use the image tag along with the srcset attribute, or inside a picture element.Sometimes \"responsive\" only relates to the screen-width. Everything collapses into a single column and that's the end of it. I remember working in an agency many years ago and I tried to convince the managers to try a mobile-first approach with an upcoming smaller project to see how it went. After hearing the sales pitch they said \"Ok, brilliant! Can we develop the desktop version at the same time?\" With that, we went desktop-first as the client only ever saw desktop designs.I'm saying this because a responsive website isn't truly responsive for reasons listed above, and many others. The end-user might not notice anything if they're on a decent phone with a fast connection. This is especially true of showing the work to clients - if we're getting feedback off them then it's usually the restrictions of their hardware that we optimise for, and for the most part they have decent specs. We also fall into the trap of making a website for them, rather than their users.I was originally going to do this about cut-corners, but I want to think the people doing this are operating within constraints, and doing the best they can. \"Cloaks\" seem like necessary evils we sometimes do to get something over the line. They'll always exist in one form or another, but thankfully the gaps in the web platform are getting smaller, and eventually, such problems will be universally solved.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["web-cloaks"],"headings":["Web Cloaks","#"],"title":"Web Cloaks","description":"A few observations on techniques that are used to disguise a problem with a website."},"/web-project-boilerplate-browserify-with-es6/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    09 Jan 2015\n  \n  \n\n  \n\n  Someone told me you like boilerplates, so I went ahead and made one just for you.https://github.com/tjFogarty/boilerplateI know, I know, we promised we wouldn’t do gifts. Is this conversational tone creeping you out yet? Yes? Then let’s move onto the contents:GulpBrowserify with es6ifygulp-sassMaintainable Sass structureBrowserSyncWiredepIE stylesheet generatorAutoprefixerCritical CSS generator← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["web-project-boilerplate-browserify-with-es6"],"headings":["Web Project Boilerplate - Browserify with ES6"],"title":"Web Project Boilerplate - Browserify with ES6","description":"Performance focused Front-end Development."},"/website-inspiration/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    27 Sep 2018\n  \n  \n\n  \n\n  I recently took to redesigning my site a little bit after seeing some interesting things being done with typography. I just love big, bold type.Now, I'm by no means a designer. I started out wanting to be one, but got lost in programming and forgot to leave some breadcrumbs down so I could find my way back. I could make things look alright-ish, and it would get the job done, but I never really gave it too much focus.I'm still making things look mostly alright, but trying to be more mindful as well. Below is how my site looks like right now. That is, this very second as I type. I tend to change things up frequently enough when I have some spare time to think.\n    My website as it stands at the moment.\n  First of all, shout out to Helen Tran. She recently redesigned her site which introduced me to the Essonnes font. Now, I don't spend a lot of time thinking about fonts, but I thought about this one for days, which is different for me. I visited the Typekit pricing page a number of times, and after a couple of days I went for it. That money should have gone into mortgage savings, and we'll say no more about it.\n    Essonnes font on helentran.com\n  I copied things a bit, for sure, and I want to give credit where it's due. I'm still finding my feet with this stuff, and while I'm no-where close in terms of design capability, I'm eagerly trying things out in the hopes I can land on my own style.Another site that reinforced my enjoyment of typography was the website for Luca Orio. There's something really clean, and crisp about it.Long story short, I'm starting to care more about design. I'm trying things out while making & breaking my site. I'm always going to be a developer, but I hope, when all is said and done, that at least I can present my own code within a well-designed interface.← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["website-inspiration"],"headings":["Website Inspiration"],"title":"Website Inspiration","description":"A few things that got me excited to try my hand at redesigning my website. That's not to say I'm a designer, cause I'm not."},"/what-do-i-know/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n  \n  \n    24 Jul 2018\n  \n  \n\n  \n\n  A couple of years back, I began to let the waves of new tech wash over me, knowing the tide would go back out again. I started to relax a bit more, and accept that the stuff I knew was enough for what I needed. \"What’s the rush?\" For that, I count myself lucky.That’s not to say I stopped learning new things — far from it — but I came to accept that I’ll never know everything. I started with HTML, CSS, and JavaScript over 10 years ago, and I’m still using them today. I’ll probably be using them for the next 10, too. All the while I’m tacking on new bits of experience and knowledge. Slowly but surely.I found my work journal from a previous job, and it kinda shocked me the number of things I was doing on a given day. I never really stopped to assess what it would all lead towards, or how I could eventually spend that experience to sell my skills. For example, on one day I was working on 3 different projects, troubleshooting with clients, reviewing code, attending meetings, and writing a spec for an upcoming job. That’s a lot of stuff I would cast off as \"just work\", before spending my nights tangled in envy at all the cool stuff people were building in the open-source world. I was envious because I filled all my social feeds with such amazing people, and I compared myself to them.I’m not an internet-famous developer. I’m not a Vue or React expert. I haven’t created a library that’s used by thousands of developers.But I know stuff.If I hadn’t kept a log of my days, I don’t think I would have realised how much I’ve been exposed to and developed from. I can’t underestimate the value of writing stuff down with pen and paper. I don’t need to charge it, I don’t need to be connected to the internet. All I need is a few quiet minutes to reflect on my journey thus far. I can build a piece of software, and not understand every software engineering principle, but I’ll learn some more of them eventually with practice. Just because I can’t put an exact name to all the stuff I know, doesn’t mean I don’t know it, if that makes sense. Know what I mean?← Home\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["what-do-i-know"],"headings":["What Do I Know?"],"title":"What Do I Know?","description":"The web moves fast, but it doesn't invalidate what you already know."},"/tags/analytics/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Fathom Analytics\n      \n      \n        \n          analytics\n        \n    \n      \n        Do Not Track\n      \n      \n        \n          javascript\n        \n        \n          analytics\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","analytics"],"headings":["Tagged “analytics”"],"title":"Tagged “analytics”","description":"Performance focused Front-end Development."},"/tags/cms/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Vapid CMS\n      \n      \n        \n          cms\n        \n        \n          javascript\n        \n    \n      \n        A Signal in the Static\n      \n      \n        \n          cms\n        \n        \n          javascript\n        \n        \n          php\n        \n        \n          craft\n        \n    \n      \n        Craft Plugins Browser\n      \n      \n        \n          javascript\n        \n        \n          cms\n        \n        \n          craft\n        \n        \n          vue\n        \n    \n      \n        Building My Site Part II: Setup\n      \n      \n        \n          cms\n        \n        \n          craft\n        \n        \n          twig\n        \n    \n      \n        Timber and Twig Reignited My Love for WordPress\n      \n      \n        \n          php\n        \n        \n          cms\n        \n        \n          wordpress\n        \n        \n          twig\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","cms"],"headings":["Tagged “cms”"],"title":"Tagged “cms”","description":"Performance focused Front-end Development."},"/tags/craft/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        A Signal in the Static\n      \n      \n        \n          cms\n        \n        \n          javascript\n        \n        \n          php\n        \n        \n          craft\n        \n    \n      \n        Theming with CSS Custom Properties\n      \n      \n        \n          css\n        \n        \n          craft\n        \n        \n          twig\n        \n    \n      \n        Craft Plugins Browser\n      \n      \n        \n          javascript\n        \n        \n          cms\n        \n        \n          craft\n        \n        \n          vue\n        \n    \n      \n        Building My Site Part II: Setup\n      \n      \n        \n          cms\n        \n        \n          craft\n        \n        \n          twig\n        \n    \n      \n        Building My Site Part I: Decisions\n      \n      \n        \n          craft\n        \n        \n          webpack\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","craft"],"headings":["Tagged “craft”"],"title":"Tagged “craft”","description":"Performance focused Front-end Development."},"/tags/css/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Text Selection Particle Effects\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Theming with CSS Custom Properties\n      \n      \n        \n          css\n        \n        \n          craft\n        \n        \n          twig\n        \n    \n      \n        Variable Fonts\n      \n      \n        \n          css\n        \n    \n      \n        Building My Site Part III: Fine Tuning\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Building a 'Now Playing' Feature\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        The (Clip) Path of Least Resistance\n      \n      \n        \n          css\n        \n    \n      \n        Building a full-screen overlay\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Quickly build a simple grid with Sass\n      \n      \n        \n          css\n        \n    \n      \n        Web Project Boilerplate - Browserify with ES6\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Front-end Strategy with a sprinkling of ExpressionEngine\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","css"],"headings":["Tagged “css”"],"title":"Tagged “css”","description":"Performance focused Front-end Development."},"/tags/design/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Website Inspiration\n      \n      \n        \n          design\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","design"],"headings":["Tagged “design”"],"title":"Tagged “design”","description":"Performance focused Front-end Development."},"/tags/experiment/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        HTML Imports & Component-Driven Development\n      \n      \n        \n          javascript\n        \n        \n          experiment\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","experiment"],"headings":["Tagged “experiment”"],"title":"Tagged “experiment”","description":"Performance focused Front-end Development."},"/tags/guide/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Improving Client-Side Performance\n      \n      \n        \n          performance\n        \n        \n          guide\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","guide"],"headings":["Tagged “guide”"],"title":"Tagged “guide”","description":"Performance focused Front-end Development."},"/tags/external-links/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Avatars.io\n      \n      \n        \n          external-links\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","external-links"],"headings":["Tagged “external-links”"],"title":"Tagged “external-links”","description":"Performance focused Front-end Development."},"/tags/inspiration/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Clever Logos\n      \n      \n        \n          inspiration\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","inspiration"],"headings":["Tagged “inspiration”"],"title":"Tagged “inspiration”","description":"Performance focused Front-end Development."},"/tags/javascript/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Text Selection Particle Effects\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Building an Appreciation System\n      \n      \n        \n          javascript\n        \n    \n      \n        Image Parallax and Blur with Tornis\n      \n      \n        \n          javascript\n        \n    \n      \n        Multi-Select Checkboxes with React\n      \n      \n        \n          react\n        \n        \n          javascript\n        \n    \n      \n        Derived Stores With Svelte\n      \n      \n        \n          javascript\n        \n    \n      \n        Scrollable Container Controls with React\n      \n      \n        \n          javascript\n        \n        \n          react\n        \n    \n      \n        Vapid CMS\n      \n      \n        \n          cms\n        \n        \n          javascript\n        \n    \n      \n        HTML Imports & Component-Driven Development\n      \n      \n        \n          javascript\n        \n        \n          experiment\n        \n    \n      \n        Building a Table of Contents with the Intersection Observer API\n      \n      \n        \n          javascript\n        \n    \n      \n        A Signal in the Static\n      \n      \n        \n          cms\n        \n        \n          javascript\n        \n        \n          php\n        \n        \n          craft\n        \n    \n      \n        Create an RSS Feed Reader\n      \n      \n        \n          javascript\n        \n        \n          vue\n        \n        \n          video\n        \n    \n      \n        Upgrading to webpack 4\n      \n      \n        \n          javascript\n        \n    \n      \n        Do Not Track\n      \n      \n        \n          javascript\n        \n        \n          analytics\n        \n    \n      \n        Page Visibility API\n      \n      \n        \n          javascript\n        \n    \n      \n        DIY RSS Feed Reader\n      \n      \n        \n          javascript\n        \n        \n          vue\n        \n    \n      \n        Craft Plugins Browser\n      \n      \n        \n          javascript\n        \n        \n          cms\n        \n        \n          craft\n        \n        \n          vue\n        \n    \n      \n        Client-Side Search with Algolia\n      \n      \n        \n          javascript\n        \n    \n      \n        Building My Site Part III: Fine Tuning\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Building a 'Now Playing' Feature\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Tip for React PropTypes with Storybook\n      \n      \n        \n          javascript\n        \n        \n          react\n        \n    \n      \n        Vue.js and Spotify Experiment\n      \n      \n        \n          javascript\n        \n        \n          vue\n        \n    \n      \n        Expanding menu with GSAP\n      \n      \n        \n          javascript\n        \n    \n      \n        Lightweight Utility Object\n      \n      \n        \n          javascript\n        \n    \n      \n        Building a full-screen overlay\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Web Project Boilerplate - Browserify with ES6\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    \n      \n        Foundation 5.5\n      \n      \n        \n          javascript\n        \n    \n      \n        Front-end Strategy with a sprinkling of ExpressionEngine\n      \n      \n        \n          javascript\n        \n        \n          css\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","javascript"],"headings":["Tagged “javascript”"],"title":"Tagged “javascript”","description":"Performance focused Front-end Development."},"/tags/life/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        What Do I Know?\n      \n      \n        \n          life\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","life"],"headings":["Tagged “life”"],"title":"Tagged “life”","description":"Performance focused Front-end Development."},"/tags/performance/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Improving Client-Side Performance\n      \n      \n        \n          performance\n        \n        \n          guide\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","performance"],"headings":["Tagged “performance”"],"title":"Tagged “performance”","description":"Performance focused Front-end Development."},"/tags/php/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        A Signal in the Static\n      \n      \n        \n          cms\n        \n        \n          javascript\n        \n        \n          php\n        \n        \n          craft\n        \n    \n      \n        Timber and Twig Reignited My Love for WordPress\n      \n      \n        \n          php\n        \n        \n          cms\n        \n        \n          wordpress\n        \n        \n          twig\n        \n    \n      \n        Getting Started with WordPress and Unit Testing\n      \n      \n        \n          php\n        \n        \n          wordpress\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","php"],"headings":["Tagged “php”"],"title":"Tagged “php”","description":"Performance focused Front-end Development."},"/tags/react/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Multi-Select Checkboxes with React\n      \n      \n        \n          react\n        \n        \n          javascript\n        \n    \n      \n        Scrollable Container Controls with React\n      \n      \n        \n          javascript\n        \n        \n          react\n        \n    \n      \n        Tip for React PropTypes with Storybook\n      \n      \n        \n          javascript\n        \n        \n          react\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","react"],"headings":["Tagged “react”"],"title":"Tagged “react”","description":"Performance focused Front-end Development."},"/tags/twig/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Theming with CSS Custom Properties\n      \n      \n        \n          css\n        \n        \n          craft\n        \n        \n          twig\n        \n    \n      \n        Building My Site Part II: Setup\n      \n      \n        \n          cms\n        \n        \n          craft\n        \n        \n          twig\n        \n    \n      \n        Timber and Twig Reignited My Love for WordPress\n      \n      \n        \n          php\n        \n        \n          cms\n        \n        \n          wordpress\n        \n        \n          twig\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","twig"],"headings":["Tagged “twig”"],"title":"Tagged “twig”","description":"Performance focused Front-end Development."},"/tags/video/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Create an RSS Feed Reader\n      \n      \n        \n          javascript\n        \n        \n          vue\n        \n        \n          video\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","video"],"headings":["Tagged “video”"],"title":"Tagged “video”","description":"Performance focused Front-end Development."},"/tags/webpack/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Building My Site Part I: Decisions\n      \n      \n        \n          craft\n        \n        \n          webpack\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","webpack"],"headings":["Tagged “webpack”"],"title":"Tagged “webpack”","description":"Performance focused Front-end Development."},"/tags/vue/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        Create an RSS Feed Reader\n      \n      \n        \n          javascript\n        \n        \n          vue\n        \n        \n          video\n        \n    \n      \n        DIY RSS Feed Reader\n      \n      \n        \n          javascript\n        \n        \n          vue\n        \n    \n      \n        Craft Plugins Browser\n      \n      \n        \n          javascript\n        \n        \n          cms\n        \n        \n          craft\n        \n        \n          vue\n        \n    \n      \n        Vue.js and Spotify Experiment\n      \n      \n        \n          javascript\n        \n        \n          vue\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","vue"],"headings":["Tagged “vue”"],"title":"Tagged “vue”","description":"Performance focused Front-end Development."},"/tags/wordpress/index.html":{"text":"\n          TJ Fogarty\n        \n          Home\n        \n          Archive\n        \n          About Me\n        \n          Search\n        \n      \n        The Weary WordPress Dev\n      \n      \n        \n          wordpress\n        \n    \n      \n        Timber and Twig Reignited My Love for WordPress\n      \n      \n        \n          php\n        \n        \n          cms\n        \n        \n          wordpress\n        \n        \n          twig\n        \n    \n      \n        Getting Started with WordPress and Unit Testing\n      \n      \n        \n          php\n        \n        \n          wordpress\n        \n    See all tags.\n      © TJ Fogarty\n    \n\n    \n\n    \n  \n\n","from":["tags","wordpress"],"headings":["Tagged “wordpress”"],"title":"Tagged “wordpress”","description":"Performance focused Front-end Development."}}